/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:57:24 GMT 2018
 */

package diamond.view.main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.paint.byvalue.ValueDB;
import diamond.paint.creasepattern.tool.TypeForChange;
import diamond.view.main.PainterScreen;
import diamond.view.main.UIPanel;
import diamond.viewsetting.model.ModelFrameSettingDB;
import java.awt.AWTEventMulticaster;
import java.awt.event.ActionEvent;
import java.awt.event.HierarchyBoundsListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Observable;
import javax.swing.JRadioButton;
import javax.swing.plaf.synth.SynthDesktopPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UIPanel_ESTest extends UIPanel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UIPanel uIPanel0 = new UIPanel((PainterScreen) null);
      SynthDesktopPaneUI synthDesktopPaneUI0 = new SynthDesktopPaneUI();
      uIPanel0.addPropertyChangeListener("", (PropertyChangeListener) synthDesktopPaneUI0);
      uIPanel0.firePropertyChange("icon/pbisector.gif", 'G', 'G');
      ActionEvent actionEvent0 = new ActionEvent(uIPanel0, 3486, "", 3486, 3486);
      actionEvent0.paramString();
      actionEvent0.setSource("");
      actionEvent0.paramString();
      uIPanel0.actionPerformed(actionEvent0);
      ModelFrameSettingDB.getInstance();
      uIPanel0.setSize(3486, 3486);
      ActionEvent actionEvent1 = null;
      // Undeclared exception!
      try { 
        uIPanel0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.main.UIPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      Observable observable0 = null;
      // Undeclared exception!
      try { 
        uIPanel0.update((Observable) null, (Object) painterScreen0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      ValueDB valueDB0 = ValueDB.getInstance();
      uIPanel0.update((Observable) valueDB0, (Object) painterScreen0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      ActionEvent actionEvent0 = new ActionEvent(painterScreen0, 0, "zM|R8!c=T_#{.!8=");
      uIPanel0.actionPerformed(actionEvent0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      // Undeclared exception!
      try { 
        uIPanel0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.main.UIPanel", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      uIPanel0.propertyChange((PropertyChangeEvent) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      UIPanel uIPanel1 = new UIPanel(painterScreen0);
      JRadioButton jRadioButton0 = uIPanel1.lineInputOnVButton;
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jRadioButton0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(uIPanel0, "", jRadioButton0, "diamond.view.main.UIPanel$3");
      uIPanel0.propertyChange(propertyChangeEvent0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Observable observable0 = new Observable();
      UIPanel uIPanel2 = new UIPanel(painterScreen0);
      observable0.addObserver(uIPanel2);
      uIPanel1.update(observable0, (Object) observable0);
      TypeForChange typeForChange0 = TypeForChange.RIDGE;
      ActionEvent actionEvent0 = new ActionEvent(typeForChange0, 0, (String) null, 0L, 0);
      uIPanel1.actionPerformed(actionEvent0);
      uIPanel2.actionPerformed(actionEvent0);
      assertNull(actionEvent0.getActionCommand());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PainterScreen painterScreen0 = new PainterScreen();
      UIPanel uIPanel0 = new UIPanel(painterScreen0);
      ValueDB.getInstance();
      Object object0 = uIPanel0.getTreeLock();
      assertNotNull(object0);
  }
}
