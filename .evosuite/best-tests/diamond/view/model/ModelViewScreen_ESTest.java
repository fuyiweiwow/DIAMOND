/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:04:53 GMT 2018
 */

package diamond.view.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.doc.Doc;
import diamond.doc.DocHolder;
import diamond.fold.OrigamiModel;
import diamond.view.model.ModelViewScreen;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import javax.swing.Icon;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelViewScreen_ESTest extends ModelViewScreen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      modelViewScreen0.dispSlideFace = true;
      modelViewScreen0.resetViewMatrix();
      assertTrue(modelViewScreen0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, 3399, 3399, 3399, 3399, 0, 0, false, 3399, 5, (-1932));
      modelViewScreen0.mouseWheelMoved(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-14), 1396L, 5, (-14), 0, 5, 5, 1418, true, 5, 5, 0);
      modelViewScreen0.mousePressed(mouseWheelEvent0);
      MouseEvent mouseEvent0 = new MouseEvent(modelViewScreen0, (-14), (-14), 5, 1, 1, (-14), false, 1);
      modelViewScreen0.mouseDragged(mouseEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      modelViewScreen0.setSize(77, 2189);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, 1, 1, 77, 1, 1, (-1070), 1, (-1070), true, (-2), (-2), 1, 0.0);
      // Undeclared exception!
      try { 
        modelViewScreen0.componentResized(mouseWheelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-14), 1396L, 0, (-14), 0, 1, 0, 1418, true, 2462, 2462, 0);
      modelViewScreen0.setSize(712, 0);
      // Undeclared exception!
      try { 
        modelViewScreen0.componentResized(mouseWheelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      modelViewScreen0.setSize((-2585), (-2585));
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, 0, (-1L), 5, (-421), 10, 0, 0, 1594, false, (-421), 0, 255, (-421));
      modelViewScreen0.mousePressed(mouseWheelEvent0);
      modelViewScreen0.mouseDragged(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-14), 1396L, 0, (-14), 0, 1, 0, 1418, true, 2462, 2462, 0);
      modelViewScreen0.mousePressed(mouseWheelEvent0);
      modelViewScreen0.setSize(712, 0);
      MouseEvent mouseEvent0 = new MouseEvent(modelViewScreen0, (-14), (-14), 0, 1, 1, (-14), false, 1);
      modelViewScreen0.mouseDragged(mouseEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      Doc doc0 = mock(Doc.class, new ViolatedAssumptionAnswer());
      doReturn((OrigamiModel) null).when(doc0).getOrigamiModel();
      DocHolder.setDoc(doc0);
      // Undeclared exception!
      try { 
        modelViewScreen0.resetViewMatrix();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      // Undeclared exception!
      try { 
        modelViewScreen0.mouseWheelMoved((MouseWheelEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      // Undeclared exception!
      try { 
        modelViewScreen0.mousePressed((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      // Undeclared exception!
      try { 
        modelViewScreen0.recalcCrossLine();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        modelViewScreen0.paintComponent(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-14), (-7), 18, (-14), (-14), 18, 18, (-7), false, (-14), (-14), (-14));
      // Undeclared exception!
      try { 
        modelViewScreen0.mouseDragged(mouseWheelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-4008), 1, 1, 1, (-891), 200, false, 5, 3, (-1119));
      modelViewScreen0.mouseDragged(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      modelViewScreen0.drawModel(graphics2D0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      // Undeclared exception!
      try { 
        modelViewScreen0.setCrossLineAngle((-3376));
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-23), (-23), (-23), (-23), (-23), (-23), (-23), (-23), false, (-23), (-23), (-23), (-23));
      modelViewScreen0.componentShown(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, 1, 1, 1, 1, 1, 1, 1, 1, false, 1, 1, 1, 1);
      modelViewScreen0.componentMoved(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, (-23), (-23), (-23), (-23), (-23), (-23), (-23), (-23), false, (-23), (-23), (-23), (-23));
      modelViewScreen0.mouseReleased(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseEvent mouseEvent0 = new MouseEvent(modelViewScreen0, 608, 608, 608, 0, 2237, 8, true);
      modelViewScreen0.mouseEntered(mouseEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      // Undeclared exception!
      try { 
        modelViewScreen0.setCrossLinePosition((-3241));
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MenuElement[] menuElementArray0 = new MenuElement[4];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(modelViewScreen0, (-3241), (-3241), (-3241), (-3241), (-3241), (-3241), (-3241), (-3241), false, menuElementArray0, menuSelectionManager0);
      modelViewScreen0.mouseMoved(menuDragMouseEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      modelViewScreen0.mouseExited((MouseEvent) null);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Icon) null, false);
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jRadioButtonMenuItem0, (-1759), 0L, 3, 0, (-1759), 0, (-1759), 54, false, menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        modelViewScreen0.componentResized(menuDragMouseEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.model.ModelViewScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseEvent mouseEvent0 = new MouseEvent(modelViewScreen0, 608, 608, 608, 0, 2237, 8, true);
      modelViewScreen0.mouseClicked(mouseEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      ActionEvent actionEvent0 = new ActionEvent(modelViewScreen0, 469, "5nm]VL7p", 469);
      modelViewScreen0.actionPerformed(actionEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ModelViewScreen modelViewScreen0 = new ModelViewScreen();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(modelViewScreen0, 1, 1, 1, 1, 1, 1, 1, 1, false, 1, 1, 1, 1);
      modelViewScreen0.componentHidden(mouseWheelEvent0);
      assertFalse(modelViewScreen0.dispSlideFace);
  }
}
