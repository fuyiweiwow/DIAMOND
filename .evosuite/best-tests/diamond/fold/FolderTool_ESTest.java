/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:47:41 GMT 2018
 */

package diamond.fold;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.BoundBox;
import diamond.fold.FolderTool;
import diamond.fold.OriFace;
import diamond.fold.OriHalfedge;
import diamond.fold.OriVertex;
import diamond.fold.OrigamiModel;
import diamond.value.OriLine;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FolderTool_ESTest extends FolderTool_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      OriHalfedge oriHalfedge1 = new OriHalfedge(oriVertex0, oriFace0);
      oriHalfedge0.next = oriHalfedge1;
      // Undeclared exception!
      try { 
        folderTool0.isLineCrossFace4(oriFace0, oriHalfedge0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriVertex> linkedList0 = new LinkedList<OriVertex>();
      OriVertex oriVertex0 = new OriVertex(0.25, (-2171.156769357));
      linkedList0.add(oriVertex0);
      LinkedList<OriFace> linkedList1 = new LinkedList<OriFace>();
      folderTool0.setFacesOutline(linkedList0, linkedList1, true);
      assertTrue(linkedList0.contains(oriVertex0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        folderTool0.isLineCrossFace4(oriFace0, (OriHalfedge) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.FolderTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      // Undeclared exception!
      try { 
        folderTool0.filpAll((OrigamiModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.FolderTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      // Undeclared exception!
      try { 
        folderTool0.cleanDuplicatedLines((Collection<OriLine>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.FolderTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      // Undeclared exception!
      try { 
        folderTool0.calcFoldedBoundingBox((List<OriFace>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.FolderTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      linkedList0.add(oriFace0);
      BoundBox boundBox0 = folderTool0.calcFoldedBoundingBox(linkedList0);
      assertNotNull(boundBox0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      LinkedList<OriVertex> linkedList1 = new LinkedList<OriVertex>();
      linkedList1.add((OriVertex) null);
      FolderTool folderTool0 = new FolderTool();
      // Undeclared exception!
      try { 
        folderTool0.setFacesOutline(linkedList1, linkedList0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.FolderTool", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      folderTool0.setFacesOutline((List<OriVertex>) null, linkedList0, false);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      OriFace oriFace0 = new OriFace();
      OrigamiModel origamiModel0 = new OrigamiModel(370.9378);
      List<OriVertex> list0 = origamiModel0.getVertices();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      linkedList0.add(oriFace0);
      // Undeclared exception!
      try { 
        folderTool0.setFacesOutline(list0, linkedList0, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OrigamiModel origamiModel0 = new OrigamiModel((-1072.4037401));
      OriFace oriFace0 = new OriFace();
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      oriFace0.faceFront = false;
      // Undeclared exception!
      try { 
        folderTool0.filpAll(origamiModel0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      OrigamiModel origamiModel0 = new OrigamiModel(4214.76619488517);
      folderTool0.filpAll(origamiModel0);
      assertFalse(origamiModel0.hasModel());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OrigamiModel origamiModel0 = new OrigamiModel((-1123.1128218094136));
      OriFace oriFace0 = new OriFace();
      linkedList0.offerFirst(oriFace0);
      origamiModel0.setFaces(linkedList0);
      // Undeclared exception!
      try { 
        folderTool0.filpAll(origamiModel0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine((-1054.36137471573), (-1054.36137471573), (-1054.36137471573), (-1054.36137471573), (-2147483647));
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine();
      linkedList0.add(oriLine1);
      boolean boolean0 = folderTool0.cleanDuplicatedLines(linkedList0);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FolderTool folderTool0 = new FolderTool();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine((-1054.36137471573), (-1054.36137471573), (-1054.36137471573), (-1054.36137471573), (-2147483647));
      linkedList0.add(oriLine0);
      linkedList0.add(oriLine0);
      boolean boolean0 = folderTool0.cleanDuplicatedLines(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }
}
