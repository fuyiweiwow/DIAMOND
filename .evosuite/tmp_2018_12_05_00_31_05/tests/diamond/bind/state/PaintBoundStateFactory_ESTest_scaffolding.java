/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Dec 04 16:23:18 GMT 2018
 */

package diamond.bind.state;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class PaintBoundStateFactory_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "diamond.bind.state.PaintBoundStateFactory"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "MS932"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\long_\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "JP"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\long_\\git\\DIAMOND"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\long_"); 
    java.lang.System.setProperty("user.language", "ja"); 
    java.lang.System.setProperty("user.name", "long_"); 
    java.lang.System.setProperty("user.timezone", ""); 
    java.lang.System.setProperty("sun.java.launcher", "SUN_STANDARD"); 
    java.lang.System.setProperty("user.variant", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(PaintBoundStateFactory_ESTest_scaffolding.class.getClassLoader() ,
      "diamond.paint.creasepattern.Painter",
      "diamond.paint.segment.SelectingSecondVertexForSegment",
      "diamond.resource.Constants$EditMode",
      "diamond.doc.Doc",
      "diamond.paint.creasepattern.VerticesManager$AreaPosition",
      "diamond.paint.segment.TwoPointSegmentAction",
      "diamond.paint.copypaste.OriginHolder",
      "diamond.viewsetting.main.uipanel.ChangeOnPaintInputButtonSelected",
      "diamond.paint.creasepattern.VerticesManager",
      "diamond.fold.FoldedModelInfo",
      "diamond.paint.selectline.SelectAllLineAction",
      "diamond.paint.core.PickingLine",
      "diamond.doc.DocHolder",
      "diamond.paint.vertical.SelectingLineForVertical",
      "diamond.doc.UndoInfo",
      "diamond.viewsetting.main.ChangeHint",
      "diamond.appstate.GroupMember",
      "diamond.geom.Line",
      "diamond.paint.symmetric.SelectingVertexForSymmetric",
      "diamond.bind.copypaste.CopyPasteErrorListener",
      "diamond.bind.copypaste.CopyAndPasteActionWrapper",
      "diamond.value.OriLine",
      "diamond.paint.core.GraphicMouseAction",
      "diamond.paint.pbisec.TwoPointBisectorAction",
      "diamond.doc.UndoManager",
      "diamond.viewsetting.ChangeViewSetting",
      "diamond.paint.copypaste.PastingOnVertex",
      "diamond.paint.copypaste.FilledOriLineArrayList",
      "diamond.paint.deletevertex.DeletingVertex",
      "diamond.paint.triangle.TriangleSplitAction",
      "diamond.paint.core.ActionState",
      "diamond.paint.core.AbstractActionState",
      "diamond.paint.deleteline.DeleteLineAction",
      "diamond.viewsetting.main.MainFrameSettingDB",
      "diamond.fold.OrigamiModel",
      "diamond.value.OriLine$Type",
      "diamond.viewsetting.main.uipanel.ChangeOnSelectButtonSelected",
      "diamond.paint.deletevertex.DeleteVertexAction",
      "diamond.paint.GraphicMouseActionInterface",
      "diamond.paint.EditMode",
      "diamond.paint.pbisec.SelectingFirstVertexForBisector",
      "diamond.bind.state.LocalPaintBoundStateFactory",
      "diamond.paint.line.TwoPointLineAction",
      "diamond.paint.deleteline.DeletingLine",
      "diamond.resource.Constants$ModelDispMode",
      "diamond.bind.state.ErrorListener",
      "diamond.paint.outline.SelectingVertexForOutline",
      "diamond.paint.core.PaintContext",
      "diamond.paint.pbisec.SelectingSecondVertexForBisector",
      "diamond.paint.selectline.SelectLineAction",
      "diamond.appstate.ApplicationState",
      "diamond.bind.state.action.PaintActionSetter",
      "diamond.paint.creasepattern.tool.PainterCommandFailedException",
      "diamond.paint.mirror.MirrorCopyAction",
      "diamond.paint.segment.SelectingFirstVertexForSegment",
      "diamond.paint.copypaste.PasteAction",
      "diamond.paint.byvalue.LineByValueAction",
      "diamond.paint.bisector.SelectingVertexForBisector",
      "diamond.viewsetting.ViewSettingDataBase",
      "diamond.paint.core.PaintConfig",
      "diamond.resource.Constants",
      "diamond.resource.Constants$LineInputMode",
      "diamond.paint.creasepattern.tool.TypeForChange",
      "diamond.viewsetting.ViewChangeListener",
      "diamond.viewsetting.main.uipanel.ChangeOnAlterTypeButtonSelected",
      "diamond.paint.byvalue.SelectingVertexToDrawLine",
      "diamond.paint.vertical.VerticalLineAction",
      "diamond.paint.copypaste.ChangeOriginAction",
      "diamond.paint.creasepattern.LineManager",
      "diamond.paint.creasepattern.tool.LineSelectionModifier",
      "diamond.bind.EditOutlineActionWrapper",
      "diamond.paint.bisector.AngleBisectorAction",
      "diamond.paint.triangle.SelectingVertexForTriangleSplit",
      "diamond.paint.linetype.ChangeLineTypeAction",
      "diamond.viewsetting.main.uipanel.ChangeOnOtherCommandButtonSelected",
      "diamond.bind.state.PaintBoundStateFactory",
      "diamond.value.OriPoint",
      "diamond.paint.ScreenUpdaterInterface",
      "diamond.paint.core.PickingVertex",
      "diamond.paint.copypaste.CopyAndPasteAction",
      "diamond.paint.outline.EditOutlineAction",
      "diamond.paint.creasepattern.CreasePattern",
      "diamond.paint.bisector.SelectingLineForBisector",
      "diamond.geom.Segment",
      "diamond.appstate.StatePusher",
      "diamond.paint.creasepattern.CreasePattern$CreasePatternIterator",
      "diamond.paint.mirror.SelectingLineForMirror",
      "diamond.paint.symmetric.SymmetricalLineAction",
      "diamond.paint.linetype.SelectingLineForLineType",
      "diamond.paint.line.SelectingSecondVertexForLine",
      "diamond.paint.selectline.SelectingLine",
      "diamond.paint.line.SelectingFirstVertexForLine",
      "diamond.fold.BoundBox",
      "diamond.paint.addvertex.AddVertexAction",
      "diamond.paint.core.RectangularSelectableAction",
      "diamond.viewsetting.main.uipanel.ChangeOnByValueButtonSelected",
      "diamond.paint.addvertex.AddingVertex",
      "diamond.bind.state.PaintBoundState",
      "diamond.paint.vertical.SelectingVertexForVertical"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(PaintBoundStateFactory_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "diamond.bind.state.PaintBoundStateFactory",
      "diamond.paint.core.PaintContext",
      "diamond.value.OriLine",
      "diamond.value.OriLine$Type",
      "diamond.value.OriPoint",
      "diamond.bind.state.LocalPaintBoundStateFactory",
      "diamond.viewsetting.ViewChangeListener",
      "diamond.viewsetting.main.uipanel.ChangeOnPaintInputButtonSelected",
      "diamond.paint.core.GraphicMouseAction",
      "diamond.paint.core.RectangularSelectableAction",
      "diamond.paint.selectline.SelectLineAction",
      "diamond.paint.selectline.SelectAllLineAction",
      "diamond.paint.core.AbstractActionState",
      "diamond.paint.core.PickingLine",
      "diamond.paint.selectline.SelectingLine",
      "diamond.paint.creasepattern.Painter",
      "diamond.doc.Doc",
      "diamond.doc.UndoManager",
      "diamond.paint.creasepattern.CreasePattern",
      "diamond.paint.creasepattern.LineManager",
      "diamond.paint.creasepattern.VerticesManager",
      "diamond.paint.creasepattern.VerticesManager$AreaPosition",
      "diamond.fold.OrigamiModel",
      "diamond.fold.FoldedModelInfo",
      "diamond.fold.BoundBox",
      "diamond.doc.DocHolder",
      "diamond.paint.creasepattern.tool.LineSelectionModifier",
      "diamond.paint.creasepattern.CreasePattern$CreasePatternIterator",
      "diamond.viewsetting.main.uipanel.ChangeOnSelectButtonSelected",
      "diamond.appstate.ApplicationState",
      "diamond.bind.state.PaintBoundState",
      "diamond.appstate.StatePusher",
      "diamond.bind.state.action.PaintActionSetter",
      "diamond.viewsetting.main.ChangeHint",
      "diamond.viewsetting.ViewSettingDataBase",
      "diamond.viewsetting.main.MainFrameSettingDB",
      "diamond.paint.vertical.VerticalLineAction",
      "diamond.paint.core.PickingVertex",
      "diamond.paint.vertical.SelectingVertexForVertical",
      "diamond.paint.segment.TwoPointSegmentAction",
      "diamond.paint.segment.SelectingFirstVertexForSegment",
      "diamond.paint.addvertex.AddVertexAction",
      "diamond.paint.addvertex.AddingVertex",
      "diamond.viewsetting.main.uipanel.ChangeOnOtherCommandButtonSelected",
      "diamond.paint.copypaste.CopyAndPasteAction",
      "diamond.bind.copypaste.CopyAndPasteActionWrapper",
      "diamond.paint.copypaste.PasteAction",
      "diamond.paint.copypaste.OriginHolder",
      "diamond.paint.copypaste.FilledOriLineArrayList",
      "diamond.paint.copypaste.PastingOnVertex",
      "diamond.paint.copypaste.ChangeOriginAction",
      "diamond.bind.copypaste.CopyPasteErrorListener",
      "diamond.paint.linetype.ChangeLineTypeAction",
      "diamond.paint.linetype.SelectingLineForLineType",
      "diamond.viewsetting.main.uipanel.ChangeOnAlterTypeButtonSelected",
      "diamond.paint.mirror.MirrorCopyAction",
      "diamond.paint.mirror.SelectingLineForMirror",
      "diamond.paint.pbisec.TwoPointBisectorAction",
      "diamond.paint.pbisec.SelectingFirstVertexForBisector",
      "diamond.resource.Constants$ModelDispMode",
      "diamond.paint.core.PaintConfig",
      "diamond.paint.deletevertex.DeleteVertexAction",
      "diamond.paint.deletevertex.DeletingVertex",
      "diamond.viewsetting.main.uipanel.ChangeOnByValueButtonSelected",
      "diamond.paint.byvalue.LineByValueAction",
      "diamond.paint.byvalue.SelectingVertexToDrawLine",
      "diamond.paint.deleteline.DeleteLineAction",
      "diamond.paint.deleteline.DeletingLine",
      "diamond.paint.line.TwoPointLineAction",
      "diamond.paint.line.SelectingFirstVertexForLine",
      "diamond.paint.triangle.TriangleSplitAction",
      "diamond.paint.triangle.SelectingVertexForTriangleSplit",
      "diamond.paint.symmetric.SymmetricalLineAction",
      "diamond.paint.symmetric.SelectingVertexForSymmetric",
      "diamond.paint.bisector.AngleBisectorAction",
      "diamond.paint.bisector.SelectingVertexForBisector",
      "diamond.paint.outline.EditOutlineAction",
      "diamond.bind.EditOutlineActionWrapper",
      "diamond.paint.outline.SelectingVertexForOutline",
      "diamond.paint.EditMode"
    );
  }
}
