/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:36:15 GMT 2018
 */

package diamond.geom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.geom.RectangleClipper;
import diamond.value.OriLine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RectangleClipper_ESTest extends RectangleClipper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(1.0E-6, 0.0, (-725.0), (-1574.964611));
      OriLine oriLine0 = new OriLine(1.0E-6, 0.0, (-1574.964611), 1.0E-6, (-1));
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(1.0, 1.0E-6, (-3992.494), 754.2);
      OriLine oriLine0 = new OriLine(0.0, 0.0, 2771.978727391, 2771.978727391, (-1227));
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, 0.0, 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine(0.0, 0.0, 1.0E-6, 0.0, (-4139));
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, 0.0, 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine(0.0, 0.0, 1.0E-6, 0.0, (-4139));
      OriLine oriLine1 = new OriLine(oriLine0.p1, oriLine0.p0, (-444));
      boolean boolean0 = rectangleClipper0.clip(oriLine1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper((-712.604723), (-712.604723), 770.5292, 1802.9023385);
      OriLine oriLine0 = new OriLine(1283.24740297612, (-712.604723), 770.5292, 0.0, 0);
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(874.169, 0.0, 874.169, 511.1664258059);
      OriLine oriLine0 = new OriLine(0.0, 511.1664258059, 874.169, 0.0, 0);
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(2919.15593, (-106.2), (-106.2), 2919.15593);
      // Undeclared exception!
      try { 
        rectangleClipper0.clipTest((OriLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.RectangleClipper", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(2167.952879, 4151.299648911288, (-1.0), 4151.299648911288);
      OriLine oriLine0 = new OriLine();
      oriLine0.p1 = null;
      // Undeclared exception!
      try { 
        rectangleClipper0.clip(oriLine0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.RectangleClipper", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(3221.6905169665442, 3221.6905169665442, 3221.6905169665442, 3221.6905169665442);
      OriLine oriLine0 = new OriLine();
      oriLine0.p0.normalize();
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(254.1056772942711, 254.1056772942711, 254.1056772942711, 254.1056772942711);
      OriLine oriLine0 = new OriLine((-483.48686848), 1.0, 0.0, 0.0, (-2934));
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper((-184.0570419665), (-184.0570419665), 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine(1.0E-6, 1.0E-6, 1.0E-6, (-753.3708), (-1143));
      OriLine oriLine1 = new OriLine();
      oriLine1.p0 = oriLine0.p0;
      boolean boolean0 = rectangleClipper0.clip(oriLine1);
      assertTrue(boolean0);
      
      boolean boolean1 = rectangleClipper0.clipTest(oriLine0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper((-184.0570419665), (-184.0570419665), 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine();
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper((-184.0570419665), (-184.0570419665), 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine(1.0E-6, 1.0E-6, 1.0E-6, (-753.3708), (-1143));
      OriLine oriLine1 = new OriLine();
      oriLine1.p0 = oriLine0.p0;
      OriLine oriLine2 = new OriLine();
      oriLine2.p1 = oriLine1.p0;
      boolean boolean0 = rectangleClipper0.clip(oriLine2);
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(3221.6905169665442, 3221.6905169665442, 3221.6905169665442, 3221.6905169665442);
      OriLine oriLine0 = new OriLine();
      oriLine0.p0.normalize();
      OriLine oriLine1 = new OriLine(oriLine0.p0, oriLine0.p0, 0);
      boolean boolean0 = rectangleClipper0.clip(oriLine1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper((-184.0570419665), (-184.0570419665), 1.0E-6, 0.0);
      OriLine oriLine0 = new OriLine(1.0E-6, 1.0E-6, 1.0E-6, (-753.3708), (-1143));
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, 0.0, 0.0, 0.0);
      OriLine oriLine0 = new OriLine(0.0, (-14.969493267409), (-2181.29), 0.0, 2);
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, (-264.9), 0.0, 0.0);
      OriLine oriLine0 = new OriLine();
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(1.0, 1.0, 1.0, 1.0);
      OriLine oriLine0 = new OriLine(1, 2921.304146175088, 3, 0, 1);
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(1.0, 1.0, 1.0, 1.0);
      OriLine oriLine0 = new OriLine(3, 1.0, 1.0, 1, 1);
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(881.5402254769372, 45.58, 45.58, 45.58);
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(881.5402254769372, 45.58, 45.58, 881.5402254769372, 2);
      OriLine oriLine2 = new OriLine(oriLine0);
      oriLine2.p0 = oriLine1.p0;
      boolean boolean0 = rectangleClipper0.clip(oriLine2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, 0.0, 0.0, 0.0);
      OriLine oriLine0 = new OriLine(2485.0321049, 1.0E-6, (-14.969493267409), 0.0, 1639);
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.9741490964589173, 0.9741490964589173, 0.9741490964589173, 0.9741490964589173);
      OriLine oriLine0 = new OriLine((-14.214056321868), (-14.214056321868), 0.9741490964589173, 0.9741490964589173, 8);
      boolean boolean0 = rectangleClipper0.clipTest(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(3221.6905169665442, 3221.6905169665442, 3221.6905169665442, 3221.6905169665442);
      OriLine oriLine0 = new OriLine();
      oriLine0.p0.normalize();
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      RectangleClipper rectangleClipper0 = new RectangleClipper(0.0, (-264.9), 0.0, 0.0);
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine((-264.9), 0, (-264.9), (-264.9), 0);
      oriLine0.p0 = oriLine1.p1;
      boolean boolean0 = rectangleClipper0.clip(oriLine0);
      boolean boolean1 = rectangleClipper0.clip(oriLine1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }
}
