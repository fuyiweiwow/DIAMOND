/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:02:19 GMT 2018
 */

package diamond.geom;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.OriFace;
import diamond.fold.OriHalfedge;
import diamond.fold.OriVertex;
import diamond.geom.GeomUtil;
import diamond.geom.Line;
import diamond.geom.Ray;
import diamond.geom.Segment;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import javax.vecmath.Point2d;
import javax.vecmath.Point2f;
import javax.vecmath.TexCoord2f;
import javax.vecmath.Tuple2d;
import javax.vecmath.Tuple2f;
import javax.vecmath.Vector2d;
import javax.vecmath.Vector2f;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GeomUtil_ESTest extends GeomUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = 1.0E-6;
      float[] floatArray0 = new float[6];
      Point2f point2f0 = new Point2f(floatArray0);
      Vector2f vector2f0 = new Vector2f(point2f0);
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine();
      Vector2d vector2d1 = new Vector2d(doubleArray0);
      Ray ray0 = new Ray(vector2d1, vector2d1);
      Segment segment0 = new Segment(vector2d0, ray0.dir);
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, ray0.dir, vector2d1, segment0.p0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      oriPoint0.y = (-0.4108262886411723);
      Line line0 = oriLine1.getLine();
      oriLine1.p0 = oriPoint0;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine1.p1, oriLine0.p0, oriLine1.p0, line0.dir);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      Vector2d vector2d0 = new Vector2d(3, 643.91);
      boolean boolean0 = GeomUtil.isSegmentsCross(vector2d0, oriLine0.p0, oriLine0.p0, line0.dir);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d(1.0E-6, 1.0E-6);
      vector2d0.set(6268.2296793, 1.0E-6);
      Ray ray0 = new Ray(vector2d1, vector2d0);
      Segment segment0 = new Segment(vector2d1, ray0.dir);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d1, 1.0, 0.0, (-522));
      GeomUtil.isSegmentsCross(oriLine0.p0, ray0.dir, vector2d1, segment0.p0);
      assertEquals((-522), oriLine0.typeVal);
      assertEquals(1.0E-6, vector2d1.x, 0.01);
      assertEquals((-522), oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      vector2d0.set(6268.2296793, 1.0E-6);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      Segment segment0 = new Segment(vector2d1, ray0.dir);
      OriLine oriLine0 = new OriLine();
      OriVertex oriVertex0 = new OriVertex(2204.0, 1.0);
      ray0.dir = oriVertex0.preP;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, ray0.dir, vector2d0, segment0.p0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      Vector2d vector2d1 = new Vector2d();
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d1, 3.12413936106985, (-2347.4), 0);
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isSegmentsCross(line0.dir, line0.dir, oriLine0.p1, vector2d0);
      assertEquals(0, oriLine0.typeVal);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriLine1.p0 = oriLine0.p0;
      GeomUtil.clipLine(oriLine1, 1.0E-6);
      boolean boolean0 = GeomUtil.isSameLineSegment(oriLine0, oriLine1);
      assertFalse(oriLine1.equals((Object)oriLine0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      float[] floatArray0 = new float[6];
      Point2f point2f0 = new Point2f(floatArray0);
      Vector2f vector2f0 = new Vector2f(point2f0);
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isRightSide(vector2d0, line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = 1.0E-6;
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      vector2d0.set(6268.2296793, 0.0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.0, (-522));
      GeomUtil.clipLine(oriLine0, 0.0);
      boolean boolean0 = GeomUtil.isLineSegmentsOverlap(ray0.p, vector2d1, ray0.p, oriLine0.p1);
      assertEquals(6268.2296793, vector2d0.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = 1.0E-6;
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      vector2d0.negate((Tuple2d) vector2d1);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.0, (-522));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 0.0);
      boolean boolean1 = GeomUtil.isLineSegmentsOverlap(ray0.p, vector2d1, ray0.p, oriLine0.p1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1204.3), (-1204.3), 3.12413936106985, 3.12413936106985, 0);
      double[] doubleArray0 = new double[7];
      boolean boolean0 = GeomUtil.getCrossPointParam(oriLine0.p1, oriLine0.p0, oriLine0.p1, oriLine0.p1, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 3.12413936106985, (-2347.4), 0);
      Line line0 = oriLine0.getLine();
      Vector2d vector2d1 = GeomUtil.getCrossPoint(line0.dir, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1);
      assertNull(vector2d1);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      vector2d0.set(6268.2296793, 0.0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      Segment segment0 = new Segment(vector2d1, ray0.dir);
      Vector2d vector2d2 = GeomUtil.getCrossPoint(ray0, segment0);
      assertNull(vector2d2);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      Line line0 = oriLine1.getLine();
      line0.dir = (Vector2d) oriLine1.p1;
      oriLine1.p0 = oriPoint0;
      line0.p = (Vector2d) oriLine1.p0;
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0, line0);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, Double.NaN);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d(1.0E-6, 1.0E-6);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 451);
      vector2d0.add((Tuple2d) oriLine0.p1, (Tuple2d) oriLine0.p0);
      OriLine oriLine1 = new OriLine(vector2d0, oriLine0.p0, 3);
      boolean boolean0 = GeomUtil.clipLine(oriLine1, 2324.9329);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = 1.0E-6;
      OriLine oriLine0 = new OriLine();
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      OriLine oriLine1 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.0, (-522));
      oriLine1.p0 = oriLine0.p0;
      boolean boolean0 = GeomUtil.clipLine(oriLine1, 0.0);
      assertTrue(oriLine1.equals((Object)oriLine0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-2462.2), (-2462.2), (-2462.2), (-849.77239640584), 1717986832);
      OriLine oriLine1 = new OriLine(1717986832, (-2462.2), 1717986832, (-2462.2), 1);
      GeomUtil.getCrossPoint((Vector2d) oriLine1.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p0, (Vector2d) oriLine1.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p0);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine1, oriLine1);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      // Undeclared exception!
      try { 
        GeomUtil.isLineCrossFace(oriFace0, oriHalfedge0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      double double0 = GeomUtil.DistanceSquared((Vector2d) oriLine0.p1, line0.dir);
      assertEquals(1094482.3485528335, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      double double0 = GeomUtil.DistanceSquared(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(3, 0.0, Double.NaN, 0.0, 2);
      Line line0 = oriLine1.getLine();
      double double0 = GeomUtil.DistancePointToSegment((Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1, line0.p, (Vector2d) oriLine0.p1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-2036.2909357249068), (-2036.2909357249068));
      OriVertex oriVertex0 = new OriVertex(oriPoint0);
      OriFace oriFace0 = new OriFace();
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      double double0 = GeomUtil.DistancePointToSegment(oriHalfedge0.p, oriHalfedge0.p, (Vector2d) oriPoint0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-2396.46898322), (-2396.46898322), (-2396.46898322), 0.02, (-1073741824));
      Line line0 = oriLine0.getLine();
      double double0 = GeomUtil.DistancePointToLine(oriLine0.p0, line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      oriLine0.p0.negate();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriLine0.p1, oriLine0, 0);
      double double0 = GeomUtil.DistancePointToLine(oriLine1.p0, line0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-3080.381), (-3080.381), 61.66, 61.66, 36);
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0 = oriPoint0;
      Line line0 = oriLine0.getLine();
      oriPoint0.y = (double) 3;
      double[] doubleArray0 = new double[8];
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p1, line0, doubleArray0);
      assertEquals(2.9999986321051275, double0, 0.01);
      assertArrayEquals(new double[] {1047.177968548559, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      OriLine oriLine0 = new OriLine(2561.0, (-1549.13849521), (-1549.13849521), (-193.0), 0);
      Line line0 = oriLine0.getLine();
      oriLine0.p1 = oriLine0.p0;
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p1, line0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-3080.381), (-3080.381), 61.66, 61.66, 36);
      Line line0 = oriLine0.getLine();
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p1, line0);
      assertEquals(2.0097183471152322E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 3.12413936106985, (-2347.4), 0);
      // Undeclared exception!
      try { 
        GeomUtil.isSegmentsCross(oriLine0.p1, oriLine0.p1, oriLine0.p1, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 0);
      oriLine0.p0 = null;
      // Undeclared exception!
      try { 
        GeomUtil.isSameLineSegment(oriLine0, oriLine0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      // Undeclared exception!
      try { 
        GeomUtil.isRightSide((Vector2d) null, line0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d();
      Line line0 = new Line(vector2d0, vector2d0);
      // Undeclared exception!
      try { 
        GeomUtil.isRange((Vector2d) null, line0.p, vector2d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.isParallel((Vector2d) null, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      // Undeclared exception!
      try { 
        GeomUtil.isLineSegmentsOverlap(oriPoint0, oriPoint0, oriPoint0, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.vecmath.Tuple2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.isFaceOverlap((OriFace) null, (OriFace) null, (-4584.9018648));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      // Undeclared exception!
      try { 
        GeomUtil.getVerticalLine(vector2d0, (OriLine) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d();
      // Undeclared exception!
      try { 
        GeomUtil.getSymmetricPoint(vector2d0, (Vector2d) null, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.getLineByValue((Vector2d) null, 1054.8223010394, 1054.8223010394, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.vecmath.Tuple2d", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      Line line0 = oriLine0.getLine();
      // Undeclared exception!
      try { 
        GeomUtil.getIncenter(line0.dir, (Vector2d) null, oriLine0.p0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      OriLine oriLine0 = new OriLine(2044.74973017, 2044.74973017, (-2475.0089119774634), 2044.74973017, (-377));
      Line line0 = oriLine0.getLine();
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPointParam(line0.dir, line0.p, line0.dir, oriLine0.p1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 1459.314, (-954));
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPoint((OriLine) null, (OriLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      OriLine oriLine0 = new OriLine(255.0, (-1.7976931348623157E308), 3952.2385, 1914.514737283208, 1);
      Line line0 = oriLine0.getLine();
      Ray ray0 = new Ray(line0.p, line0.p);
      Segment segment0 = new Segment((Vector2d) null, ray0.dir);
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPoint(ray0, segment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPoint((Line) null, (Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f((-3248.0F), 1.0F);
      Vector2d vector2d0 = new Vector2d(vector2f0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      OriPoint oriPoint0 = new OriPoint();
      // Undeclared exception!
      try { 
        GeomUtil.getBisectorVec((Vector2d) null, oriPoint0, ray0.p);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.clipLine((OriLine) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      Line line0 = new Line(oriPoint0, oriPoint0);
      // Undeclared exception!
      try { 
        GeomUtil.DistanceSquared((Vector2d) null, line0.p);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-1246.57420107), (-1511.72565151398));
      // Undeclared exception!
      try { 
        GeomUtil.DistancePointToSegment((Vector2d) null, (Vector2d) null, (Vector2d) oriPoint0, (Vector2d) oriPoint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      Ray ray0 = new Ray(vector2d0, vector2d0);
      OriLine oriLine0 = new OriLine();
      // Undeclared exception!
      try { 
        GeomUtil.DistancePointToSegment((Vector2d) oriLine0.p1, (Vector2d) null, ray0.p);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      // Undeclared exception!
      try { 
        GeomUtil.Distance((Vector2d) null, line0.dir);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      double[] doubleArray0 = new double[2];
      // Undeclared exception!
      try { 
        GeomUtil.Distance((Vector2d) oriLine0.p1, (Line) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-1246.57420107), (-1511.72565151398));
      Line line0 = new Line(oriPoint0, oriPoint0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        GeomUtil.Distance(line0.dir, line0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      // Undeclared exception!
      try { 
        GeomUtil.CCWcheck((Vector2d) null, (Vector2d) null, (Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      boolean boolean0 = GeomUtil.isRange(vector2d0, vector2d0, vector2d0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1204.3), (-1204.3), 3.12413936106985, 3.12413936106985, 0);
      oriLine0.p1.set((-1204.3), (double) 2);
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isRange((Vector2d) oriLine0.p0, line0.dir, (Vector2d) oriLine0.p1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1204.3), (-1204.3), 3.12413936106985, 3.12413936106985, 0);
      boolean boolean0 = GeomUtil.isRange((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      boolean boolean0 = GeomUtil.isRange(1.0E-6, (-1.7976931348623157E308), 0.0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      boolean boolean0 = GeomUtil.isRange(716.1928667, 716.1928667, 0.95);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      boolean boolean0 = GeomUtil.isRange((-1.0), (-1.0), 2.0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      boolean boolean0 = GeomUtil.isParallel(vector2d0, vector2d0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1204.3), (-1204.3), 3.12413936106985, 3.12413936106985, 0);
      boolean boolean0 = GeomUtil.isParallel(oriLine0.p1, oriLine0.p0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1204.3), (-1204.3), 3.12413936106985, 3.12413936106985, 0);
      oriLine0.p1.scaleAdd((-7.142428013776792), (Tuple2d) oriLine0.p0);
      boolean boolean0 = GeomUtil.isParallel(oriLine0.p1, oriLine0.p0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        GeomUtil.isContainsPointFoldedFace(oriFace0, vector2d0, 1.0E-6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine(664.0F, 664.0, 0.0F, 0.7, (-1228503030));
      double double0 = GeomUtil.DistancePointToSegment(vector2d0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1);
      assertEquals(0.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      vector2d0.set(6268.2296793, 1.0E-6);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.0, (-522));
      double double0 = GeomUtil.DistancePointToSegment(vector2d1, ray0.p, (Vector2d) oriLine0.p1);
      assertEquals(6268.2296793, vector2d0.x, 0.01);
      assertEquals(6268.2296793, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1722.2090382), (-1.7976931348623157E308), 3952.2385, 1914.514737283208, 1);
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0.negate();
      oriPoint0.y = (double) 2148;
      OriLine oriLine1 = new OriLine();
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine1.p1, oriLine0.p1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0.negate();
      oriPoint0.y = (double) 3;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine0.p1, oriPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      Line line0 = oriLine1.getLine();
      line0.dir = (Vector2d) oriLine1.p1;
      oriLine1.p0 = oriPoint0;
      line0.dir.scaleAdd((double) 1, (Tuple2d) line0.p, (Tuple2d) oriPoint0);
      line0.dir = (Vector2d) oriPoint0;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine1.p1, oriLine0.p0, oriLine1.p0, line0.dir);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      Line line0 = oriLine1.getLine();
      line0.dir = (Vector2d) oriLine1.p1;
      oriLine1.p0 = oriPoint0;
      line0.dir.scaleAdd((double) 1, (Tuple2d) line0.p, (Tuple2d) oriPoint0);
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine1.p1, oriLine0.p0, oriLine1.p0, line0.dir);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      oriPoint0.y = (-0.4108262886411723);
      Line line0 = oriLine1.getLine();
      line0.dir = (Vector2d) oriLine1.p1;
      oriLine1.p0 = oriPoint0;
      line0.dir = (Vector2d) oriPoint0;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine1.p1, oriLine0.p0, oriLine1.p0, line0.dir);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d(1.0E-6, 1.0E-6);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, (-2146994507));
      vector2d0.add((Tuple2d) oriLine0.p1, (Tuple2d) oriLine0.p0);
      OriLine oriLine1 = GeomUtil.getVerticalLine(vector2d0, oriLine0, (-2146994507));
      GeomUtil.clipLine(oriLine1, 2324.9329);
      boolean boolean0 = GeomUtil.isSegmentsCross(vector2d0, oriLine1.p1, oriLine0.p0, oriLine0.p1);
      assertTrue(oriLine1.equals((Object)oriLine0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d(1.0E-6, 1.0E-6);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, (-2146994507));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 2324.9329);
      assertTrue(boolean0);
      
      boolean boolean1 = GeomUtil.isSegmentsCross(vector2d0, oriLine0.p1, oriLine0.p0, oriLine0.p1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      OriPoint oriPoint0 = new OriPoint();
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine0.p1, oriLine0.p1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p1, oriLine0.p1, oriLine0.p0, line0.p);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0 = oriPoint0;
      OriLine oriLine1 = GeomUtil.getLineByValue(oriLine0.p0, (-699.937069733454), (-1.0), 3);
      GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine1.p1, oriPoint0);
      assertEquals(3, oriLine1.typeVal);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.x = 0.9;
      Line line0 = oriLine1.getLine();
      oriLine1.p0 = oriPoint0;
      line0.dir.clamp(Double.NaN, (double) 3, (Tuple2d) oriPoint0);
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine1.p1, oriLine0.p0, oriLine1.p0, line0.dir);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0 = oriPoint0;
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine0.p1, oriPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      boolean boolean0 = GeomUtil.isSegmentsCross(oriLine0.p0, oriPoint0, oriLine0.p1, oriPoint0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      OriLine oriLine1 = new OriLine(0, 0.0, 0, 0.0, 2);
      oriLine1.p0 = oriLine0.p1;
      boolean boolean0 = GeomUtil.isSameLineSegment(oriLine0, oriLine1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      OriLine oriLine1 = new OriLine(0, 0.0, 0, 0.0, 2);
      boolean boolean0 = GeomUtil.isSameLineSegment(oriLine0, oriLine1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      boolean boolean0 = GeomUtil.isSameLineSegment(oriLine0, oriLine0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f(0.0F, 664.0F);
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine(664.0F, 664.0, 0.0F, 0.7, (-1228503030));
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isRightSide(vector2d0, line0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.isRightSide(oriLine0.p0, line0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getLineByValue(oriLine0.p1, 4392.0, 2.0, 2);
      OriLine oriLine2 = GeomUtil.getLineByValue(oriLine1.p1, 2, (-1148.493862334343), 3);
      Segment segment0 = oriLine1.getSegment();
      GeomUtil.clipLine(oriLine1, 2048.0359390252956);
      boolean boolean0 = GeomUtil.isLineSegmentsOverlap(oriLine2.p1, oriLine0.p0, oriLine1.p0, segment0.p1);
      assertFalse(boolean0);
      assertEquals(3, oriLine2.typeVal);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getLineByValue(oriLine0.p1, 4392.0, 2.0, 2);
      Segment segment0 = oriLine1.getSegment();
      assertFalse(oriLine1.equals((Object)oriLine0));
      
      GeomUtil.clipLine(oriLine1, 2048.0359390252956);
      boolean boolean0 = GeomUtil.isLineSegmentsOverlap(oriLine1.p1, oriLine0.p0, oriLine1.p0, segment0.p1);
      assertTrue(boolean0);
      assertEquals(2, oriLine1.typeVal);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Vector2d vector2d1 = new Vector2d((Tuple2d) vector2d0);
      vector2d0.set(6268.2296793, 0.0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.95, (-545));
      boolean boolean0 = GeomUtil.isLineSegmentsOverlap(ray0.p, vector2d1, ray0.p, oriLine0.p1);
      assertEquals(6268.2296793, vector2d0.x, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vector2d vector2d0 = new Vector2d(1.0E-6, 1.0E-6);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, (-2146994507));
      Line line0 = new Line(oriLine0.p1, oriLine0.p0);
      boolean boolean0 = GeomUtil.isLineSegmentsOverlap(line0.dir, oriLine0.p0, oriLine0.p0, vector2d0);
      assertFalse(boolean0);
      assertEquals(1.0E-6, vector2d0.y, 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        GeomUtil.isFaceOverlap(oriFace0, oriFace0, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      float[] floatArray0 = new float[5];
      TexCoord2f texCoord2f0 = new TexCoord2f(floatArray0);
      Vector2d vector2d0 = new Vector2d(texCoord2f0);
      OriVertex oriVertex0 = new OriVertex(vector2d0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add((OriHalfedge) null);
      // Undeclared exception!
      try { 
        GeomUtil.isContainsPointFoldedFace(oriFace0, oriHalfedge0.tmpVec, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      Line line0 = oriLine0.getLine();
      OriPoint oriPoint0 = new OriPoint(1.0, 3.141592653589793);
      double[] doubleArray0 = new double[9];
      boolean boolean0 = GeomUtil.getCrossPointParam(oriLine0.p1, oriLine0.p0, oriPoint0, line0.p, doubleArray0);
      assertArrayEquals(new double[] {1.0000000000000002, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      double[] doubleArray0 = new double[9];
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.getCrossPointParam(line0.dir, oriLine0.p0, oriLine0.p0, line0.dir, doubleArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      Line line0 = oriLine0.getLine();
      line0.p = (Vector2d) oriLine0.p1;
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, line0.p, line0.p, (Vector2d) oriLine0.p0, (Vector2d) oriPoint0, (Vector2d) oriLine0.p1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p1, (Vector2d) oriLine0.p0, line0.p, line0.dir, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, line0.p, line0.dir, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      Line line0 = oriLine0.getLine();
      Vector2d vector2d0 = GeomUtil.getSymmetricPoint(line0.dir, oriLine0.p0, oriLine0.p1);
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, vector2d0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals(1.0, vector2d0.y, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      Line line0 = oriLine0.getLine();
      Vector2d vector2d1 = GeomUtil.getSymmetricPoint(line0.dir, oriLine0.p0, oriLine0.p1);
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, line0.p, line0.dir, vector2d0, vector2d1, (Vector2d) oriLine0.p1);
      assertEquals(1.0, vector2d1.y, 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      OriLine oriLine1 = new OriLine(oriLine0);
      OriPoint oriPoint0 = oriLine1.p1;
      oriPoint0.normalize();
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine1.p1, (Vector2d) oriPoint0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      Segment segment0 = new Segment(vector2d0, ray0.dir);
      OriPoint oriPoint0 = new OriPoint((-545), 1.0);
      GeomUtil.getCrossPoint((Vector2d) oriPoint0, (Vector2d) null, segment0.p0, segment0.p0, (Vector2d) oriPoint0, (Vector2d) oriPoint0);
      assertEquals(1.0, oriPoint0.y, 0.01);
      assertEquals((-545.0), oriPoint0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 699.937069733454);
      assertTrue(boolean0);
      
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, line0.p, line0.p, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Point2f point2f0 = new Point2f(vector2f0);
      Vector2d vector2d0 = new Vector2d(point2f0);
      OriLine oriLine0 = new OriLine();
      Ray ray0 = new Ray(vector2d0, oriLine0.p0);
      OriLine oriLine1 = GeomUtil.getLineByValue(oriLine0.p1, 4392.0, 2.0, 2);
      OriLine oriLine2 = GeomUtil.getLineByValue(oriLine1.p1, 2, (-1148.493862334343), 3);
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine2.p0, vector2d0, (Vector2d) oriLine2.p0, (Vector2d) oriLine2.p0, ray0.dir, ray0.dir);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      line0.p = (Vector2d) oriLine0.p1;
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, line0.p, line0.p, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0, (Vector2d) oriLine0.p1);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      Ray ray0 = new Ray(oriPoint0, oriPoint0);
      OriLine oriLine0 = new OriLine(ray0.dir, ray0.p, (-2286));
      OriLine oriLine1 = GeomUtil.getVerticalLine(ray0.dir, oriLine0, 963);
      GeomUtil.clipLine(oriLine1, (-3018.0774113459));
      // Undeclared exception!
      try { 
        GeomUtil.getCrossPoint((Vector2d) null, (Vector2d) oriLine0.p0, ray0.dir, (Vector2d) oriLine1.p1, ray0.p, ray0.dir);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      int int0 = GeomUtil.getCrossPoint((Vector2d) oriPoint0, (Vector2d) oriPoint0, (Vector2d) oriPoint0, (Vector2d) oriPoint0, (Vector2d) oriPoint0, (Vector2d) oriPoint0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      oriLine1.p0 = oriPoint0;
      Segment segment0 = oriLine1.getSegment();
      OriPoint oriPoint1 = new OriPoint((-75.77790760358), 1636.8490154463354);
      Vector2f vector2f0 = new Vector2f(2700.999F, 0.0F);
      Vector2d vector2d0 = new Vector2d((Tuple2f) vector2f0);
      Vector2d vector2d1 = GeomUtil.getCrossPoint((Vector2d) oriPoint1, (Vector2d) oriLine1.p0, segment0.p1, vector2d0);
      assertNull(vector2d1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0.negate();
      oriPoint0.y = (double) 3;
      Line line0 = oriLine0.getLine();
      Segment segment0 = oriLine0.getSegment();
      segment0.p1 = line0.p;
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0.dir, (Vector2d) oriLine0.p1, (Vector2d) oriPoint0, segment0.p1);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      OriPoint oriPoint0 = new OriPoint();
      oriPoint0.y = (double) 2148;
      Line line0 = oriLine0.getLine();
      Segment segment0 = new Segment(oriLine0.p1, oriLine0.p0);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0.dir, (Vector2d) oriLine0.p1, (Vector2d) oriPoint0, segment0.p1);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      OriPoint oriPoint0 = new OriPoint();
      Line line0 = oriLine0.getLine();
      Segment segment0 = new Segment(oriLine0.p1, oriLine0.p0);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0.dir, (Vector2d) oriLine0.p1, (Vector2d) oriPoint0, segment0.p1);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 2148);
      Line line0 = oriLine0.getLine();
      Segment segment0 = new Segment(oriLine0.p1, oriLine0.p0);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0.dir, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p1, segment0.p1);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-3684.0), (-3684.0));
      Ray ray0 = new Ray(oriPoint0, oriPoint0);
      OriLine oriLine0 = GeomUtil.getLineByValue(ray0.dir, 1025.6, 758.884295231, 1);
      oriPoint0.scaleAdd((-612.504), (Tuple2d) oriLine0.p0, (Tuple2d) ray0.p);
      Segment segment0 = oriLine0.getSegment();
      GeomUtil.getCrossPoint(ray0, segment0);
      assertEquals(2252780.736, oriPoint0.x, 0.01);
      assertEquals(1, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-3684.0), (-3684.0));
      Ray ray0 = new Ray(oriPoint0, oriPoint0);
      OriLine oriLine0 = new OriLine((-3684.0), 758.884295231, 1, (-3684.0), 1);
      ray0.dir = (Vector2d) oriLine0.p1;
      oriPoint0.negate();
      Segment segment0 = oriLine0.getSegment();
      Vector2d vector2d0 = GeomUtil.getCrossPoint(ray0, segment0);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-3684.0), (-3684.0));
      Ray ray0 = new Ray(oriPoint0, oriPoint0);
      OriLine oriLine0 = new OriLine((-3684.0), 758.884295231, 1, (-3684.0), 1);
      ray0.dir = (Vector2d) oriLine0.p1;
      Segment segment0 = oriLine0.getSegment();
      Vector2d vector2d0 = GeomUtil.getCrossPoint(ray0, segment0);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-3684.0), (-3684.0));
      Ray ray0 = new Ray(oriPoint0, oriPoint0);
      OriLine oriLine0 = GeomUtil.getLineByValue(ray0.dir, 1025.6, 758.884295231, 1);
      Segment segment0 = oriLine0.getSegment();
      Vector2d vector2d0 = GeomUtil.getCrossPoint(ray0, segment0);
      assertNotNull(vector2d0);
      assertEquals(1, oriLine0.typeVal);
      assertEquals(1, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      Segment segment0 = new Segment(vector2d0, ray0.dir);
      Vector2d vector2d1 = GeomUtil.getCrossPoint(ray0, segment0);
      assertNull(vector2d1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1722.2090382), (-1.7976931348623157E308), 3952.2385, 1914.514737283208, 1);
      oriLine0.p0.clamp((-2191.06577464511), (-1722.2090382), (Tuple2d) oriLine0.p0);
      Line line0 = oriLine0.getLine();
      Line line1 = new Line(line0.p, oriLine0.p1);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0, line1);
      assertNotNull(vector2d0);
      assertEquals((-1722.2090382), vector2d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      Line line0 = new Line(oriPoint0, oriPoint0);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(line0, line0);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-2462.2), (-2462.2), (-2462.2), (-850.7300279981515), 1717986832);
      OriLine oriLine1 = new OriLine(oriLine0);
      Vector2d vector2d0 = new Vector2d();
      GeomUtil.getCrossPoint((Vector2d) oriLine1.p0, (Vector2d) oriLine0.p1, vector2d0, (Vector2d) oriLine1.p0, (Vector2d) oriLine0.p1, (Vector2d) oriLine0.p0);
      double double0 = GeomUtil.DistancePointToSegment((Vector2d) oriLine0.p0, vector2d0, (Vector2d) oriLine1.p0, (Vector2d) oriLine1.p1);
      assertFalse(oriLine1.equals((Object)oriLine0));
      assertEquals(6.431098710768743E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = oriLine0.getLine();
      GeomUtil.clipLine(oriLine0, 699.937069733454);
      OriVertex oriVertex0 = new OriVertex(line0.p);
      OriFace oriFace0 = new OriFace();
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      Vector2d vector2d0 = oriHalfedge0.p;
      vector2d0.clamp((double) 2, 1.0E-6, (Tuple2d) oriHalfedge0.positionForDisplay);
      double double0 = GeomUtil.DistancePointToSegment(oriVertex0.p, oriHalfedge0.positionForDisplay, oriHalfedge0.p, vector2d0);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(699.937069733454, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), (-1.0), (-1.0), 3);
      oriLine0.p0.negate();
      boolean boolean0 = GeomUtil.clipLine(oriLine0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      oriLine0.p0.negate();
      GeomUtil.clipLine(oriLine0, 699.937069733454);
      boolean boolean0 = GeomUtil.clipLine(oriLine0, (-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      vector2d0.set(6268.2296793, 0.0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.95, (-545));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 0.95);
      assertEquals(6268.2296793, vector2d0.x, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (-1.5953467746434097E-4);
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 942.1045157718067, 1.5437593662949824E9, 1203);
      boolean boolean0 = GeomUtil.clipLine(oriLine0, (-1.5953467746434097E-4));
      assertFalse(boolean0);
      assertEquals(1203, oriLine0.typeVal);
      assertEquals(0.0, vector2d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      vector2d0.set(6268.2296793, Double.NaN);
      Ray ray0 = new Ray(vector2d0, vector2d0);
      Segment segment0 = new Segment(vector2d0, ray0.dir);
      OriLine oriLine0 = new OriLine(segment0.p0, segment0.p0, (-365));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, (-0.1817756078381422));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-2462.2), (-2462.2), (-2462.2), (-850.7300279981515), 1717986832);
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 1047.1822657996456);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      double[] doubleArray0 = new double[18];
      doubleArray0[1] = 1.0E-6;
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      OriLine oriLine0 = GeomUtil.getLineByValue(vector2d0, 1.0, 0.0, (-522));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 0.0);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals((-522), oriLine0.typeVal);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      OriLine oriLine0 = new OriLine(1717986832, (-2462.2), 1717986832, (-2462.2), 1);
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 1047.1822657996456);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      boolean boolean0 = GeomUtil.clipLine(oriLine0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      OriPoint oriPoint0 = new OriPoint();
      oriLine0.p0 = oriPoint0;
      Line line0 = oriLine0.getLine();
      oriPoint0.y = (double) 3;
      boolean boolean0 = GeomUtil.CCWcheck(oriLine0.p1, oriLine0.p0, line0.dir);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vector2f vector2f0 = new Vector2f();
      Vector2d vector2d0 = new Vector2d(vector2f0);
      OriLine oriLine0 = new OriLine(0.0F, 0.0, 0.0F, 0.7, (-1228503030));
      Line line0 = oriLine0.getLine();
      boolean boolean0 = GeomUtil.CCWcheck(vector2d0, line0.p, oriLine0.p0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-0.24668689381401165), (-0.24668689381401165));
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      OriLine oriLine2 = new OriLine(oriLine1.p1, oriLine0.p0, (-187));
      OriLine oriLine3 = new OriLine(0.0, (-0.24668689381401165), 1, 476.98, 1);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine2, oriLine3);
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertNull(vector2d0);
      assertTrue(oriLine1.equals((Object)oriLine2));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint(1.0, 1.0);
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 2);
      OriLine oriLine2 = new OriLine(oriLine1.p1, oriLine0.p0, 2);
      OriLine oriLine3 = new OriLine(0.0, 1.0, 650.5, 476.98, 1);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine2, oriLine3);
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertNull(vector2d0);
      assertTrue(oriLine1.equals((Object)oriLine2));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-0.24668689381401165), (-0.24668689381401165));
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      OriLine oriLine2 = new OriLine(oriLine1.p1, oriLine0.p0, (-187));
      OriLine oriLine3 = new OriLine((-580), (-0.24668689381401165), 1, 476.98, 1);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine2, oriLine3);
      assertNull(vector2d0);
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertTrue(oriLine1.equals((Object)oriLine2));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint(1.0, 1.0);
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      OriLine oriLine2 = new OriLine(oriLine1.p1, oriLine0.p0, (-187));
      OriLine oriLine3 = new OriLine(0.0, 1.0, 1, 476.98, 1);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine2, oriLine3);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getLineByValue(oriLine0.p0, 4392.0, 2.0, 2);
      OriLine oriLine2 = GeomUtil.getLineByValue(oriLine1.p1, 2, (-1148.493862334343), 3);
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine2, oriLine1);
      assertEquals(4389.324512267868, vector2d0.x, 0.01);
      assertEquals(153.27858951738426, vector2d0.y, 0.01);
      assertEquals(3, oriLine2.typeVal);
      assertNotNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = GeomUtil.getVerticalLine(oriPoint0, oriLine0, 0);
      oriPoint0.y = (double) 1;
      oriLine1.p0 = oriPoint0;
      Segment segment0 = oriLine1.getSegment();
      Vector2f vector2f0 = new Vector2f(2700.999F, 0.0F);
      Vector2d vector2d0 = new Vector2d((Tuple2f) vector2f0);
      Vector2d vector2d1 = GeomUtil.getCrossPoint((Vector2d) oriLine0.p0, (Vector2d) oriLine1.p0, segment0.p1, vector2d0);
      assertNotNull(vector2d1);
      assertEquals(0.0, vector2d1.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GeomUtil geomUtil0 = new GeomUtil();
      assertEquals(1.0E-6, GeomUtil.EPS, 0.01);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Vector2d vector2d0 = GeomUtil.getCrossPoint(oriLine0, oriLine0);
      assertNull(vector2d0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint();
      Vector2d vector2d0 = GeomUtil.getBisectorVec(oriPoint0, oriPoint0, oriPoint0);
      boolean boolean0 = GeomUtil.CCWcheck(vector2d0, vector2d0, vector2d0);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      double double0 = GeomUtil.DistanceSquared((Vector2d) oriLine0.p0, (Vector2d) oriLine0.p0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      OriLine oriLine0 = new OriLine((-1.0), (-1.0), 1047.174626223, (-1.0), 3);
      Line line0 = oriLine0.getLine();
      double[] doubleArray0 = new double[8];
      double double0 = GeomUtil.Distance((Vector2d) oriLine0.p1, line0, doubleArray0);
      assertArrayEquals(new double[] {1048.174626223, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      double double0 = GeomUtil.DistanceSquared((-1722.2090382), (-1722.2090382), (-1.0), (-1.0));
      assertEquals(5925121.106362738, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      OriPoint oriPoint0 = new OriPoint((-1246.57420107), (-1511.72565151398));
      Vector2d vector2d0 = GeomUtil.getIncenter(oriPoint0, oriPoint0, oriPoint0);
      assertEquals(Double.NaN, vector2d0.y, 0.01);
      assertEquals(Double.NaN, vector2d0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      OriLine oriLine0 = new OriLine();
      Line line0 = new Line(oriLine0.p1, oriLine0.p1);
      // Undeclared exception!
      try { 
        GeomUtil.DistancePointToLine((Vector2d) null, line0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Point2d point2d0 = new Point2d();
      Vector2d vector2d0 = new Vector2d(point2d0);
      // Undeclared exception!
      try { 
        GeomUtil.Distance(vector2d0, (Line) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }
}
