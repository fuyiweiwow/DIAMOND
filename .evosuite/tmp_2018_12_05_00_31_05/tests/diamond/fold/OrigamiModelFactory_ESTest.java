/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:10:12 GMT 2018
 */

package diamond.fold;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.OrigamiModel;
import diamond.fold.OrigamiModelFactory;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import java.awt.HeadlessException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import javax.vecmath.TexCoord2f;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OrigamiModelFactory_ESTest extends OrigamiModelFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(9, 0, 9, (-5052.62427445542), (-1768));
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3NoDuplicateLines(arrayList0, (-2022.91203069));
      assertFalse(origamiModel0.isProbablyFoldable());
      assertEquals((-2022.91203069), origamiModel0.getPaperSize(), 0.01);
      assertTrue(origamiModel0.hasModel());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      TexCoord2f texCoord2f0 = new TexCoord2f(9, 9);
      Vector2d vector2d0 = new Vector2d(texCoord2f0);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, (-15));
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 650.112, false);
      assertEquals(650.112, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(oriLine0);
      arrayList0.add(oriLine1);
      OriLine oriLine2 = new OriLine(1, 2, 1, (-1.0), 0);
      oriLine1.p0 = oriLine2.p1;
      oriLine2.p1 = oriLine0.p0;
      oriLine1.setTypeValue(2);
      OriLine oriLine3 = new OriLine(oriLine2);
      oriLine3.changeToNextType();
      arrayList0.add(oriLine3);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (-3372.2319));
      assertTrue(origamiModel0.hasModel());
      assertFalse(origamiModel0.isProbablyFoldable());
      assertEquals((-3372.2319), origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      oriLine0.setType(oriLine_Type0);
      OriLine oriLine1 = new OriLine(9, 65, 0, 0, 1);
      arrayList0.add(oriLine1);
      oriLine1.setTypeValue(2);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3NoDuplicateLines(arrayList0, 2);
      assertFalse(origamiModel0.hasModel());
      assertEquals(2.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, 0.0);
      assertTrue(origamiModel0.isProbablyFoldable());
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, (-3497.976), false);
      assertEquals((-3497.976), origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      List<OriLine> list0 = linkedList0.subList(0, 0);
      OriLine oriLine0 = new OriLine();
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3NoDuplicateLines(list0, 0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3NoDuplicateLines((Collection<OriLine>) null, (-1231.875495));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OrigamiModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(1, 0, 0, 0.0, 65);
      arrayList0.add(oriLine0);
      arrayList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3NoDuplicateLines(arrayList0, 25.55908340590226);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      List<OriLine> list0 = linkedList0.subList(0, 0);
      OriLine oriLine0 = new OriLine();
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) list0, 0.0, true);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) null, 0.0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OrigamiModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      List<OriLine> list0 = linkedList0.subList(0, 0);
      Vector2d vector2d0 = new Vector2d();
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 1);
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) list0, 0.7);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      arrayList0.add((OriLine) null);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0, 2.23606797749979, 2.23606797749979, 9, 0);
      linkedList0.add(oriLine0);
      List<OriLine> list0 = linkedList0.subList(1, 1);
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.buildOrigami(list0, 2961.7, false);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      // Undeclared exception!
      try { 
        origamiModelFactory0.buildOrigami((Collection<OriLine>) null, (-3306.0), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OrigamiModelFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      oriLine0.setType(oriLine_Type0);
      OriLine oriLine1 = new OriLine(9, 65, 0, 0, 1);
      arrayList0.add(oriLine1);
      oriLine1.setTypeValue(2);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 0, true);
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
      assertFalse(origamiModel0.hasModel());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(1, 0, 0, 0.0, 65);
      arrayList0.add(oriLine0);
      arrayList0.add(oriLine0);
      OriLine oriLine1 = new OriLine(0.0, 2, 1, (-1.0), 0);
      oriLine1.changeToNextType();
      oriLine1.p1 = oriLine0.p0;
      arrayList0.add(oriLine1);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 1, false);
      assertTrue(origamiModel0.hasModel());
      assertFalse(origamiModel0.isProbablyFoldable());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(1, 0, 2, 0, 2);
      arrayList0.add(0, oriLine0);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (-591.5), false);
      assertTrue(origamiModel0.isProbablyFoldable());
      assertEquals((-591.5), origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriPoint oriPoint0 = new OriPoint(65, (-1.0));
      oriLine0.p0 = oriPoint0;
      arrayList0.add(oriLine0);
      OriLine oriLine1 = new OriLine(1, 2, 1, (-1.0), 0);
      oriLine1.p1 = oriLine0.p0;
      oriLine0.setTypeValue(2);
      OriLine oriLine2 = new OriLine(oriLine1);
      oriLine2.changeToNextType();
      arrayList0.add(oriLine2);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 0, true);
      assertTrue(origamiModel0.hasModel());
      assertFalse(origamiModel0.isProbablyFoldable());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(oriLine0);
      arrayList0.add(oriLine1);
      OriLine oriLine2 = new OriLine(1, 2, 1, (-1.0), (-32));
      oriLine1.p0 = oriLine2.p1;
      oriLine1.setTypeValue(2);
      OriLine oriLine3 = new OriLine();
      oriLine3.changeToNextType();
      arrayList0.add(oriLine3);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) (-32), true);
      assertFalse(origamiModel0.isProbablyFoldable());
      assertEquals((-32.0), origamiModel0.getPaperSize(), 0.01);
      assertTrue(origamiModel0.hasModel());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, 0.0, false);
      assertTrue(origamiModel0.isProbablyFoldable());
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      oriLine0.setType(oriLine_Type0);
      OriLine oriLine1 = new OriLine(9, 1, 0, 0, 1);
      arrayList0.add(oriLine1);
      oriLine1.changeToNextType();
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 3);
      assertEquals(3.0, origamiModel0.getPaperSize(), 0.01);
      assertFalse(origamiModel0.hasModel());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3NoDuplicateLines(arrayList0, (-4495.1728364905));
      assertEquals((-4495.1728364905), origamiModel0.getPaperSize(), 0.01);
      assertTrue(origamiModel0.isProbablyFoldable());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(oriLine0);
      arrayList0.add(oriLine1);
      OriLine oriLine2 = new OriLine(1, 2, 1, (-1.0), (-32));
      oriLine1.p0 = oriLine2.p1;
      oriLine1.setTypeValue(2);
      OriLine oriLine3 = new OriLine();
      oriLine3.changeToNextType();
      arrayList0.add(oriLine3);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 1.0, false);
      assertEquals(1.0, origamiModel0.getPaperSize(), 0.01);
      assertFalse(origamiModel0.isProbablyFoldable());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(1, 0, 0, 0.0, 65);
      arrayList0.add(oriLine0);
      OriLine oriLine1 = new OriLine(0.0, 2, 1, (-1.0), 0);
      oriLine1.p1 = oriLine0.p0;
      oriLine1.changeToNextType();
      arrayList0.add(oriLine1);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 1.0, false);
      assertEquals(1.0, origamiModel0.getPaperSize(), 0.01);
      assertTrue(origamiModel0.isProbablyFoldable());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(1, 0, 0, 0.0, 65);
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      oriLine0.setType(oriLine_Type0);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 295.3664481, false);
      assertEquals(295.3664481, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine(0, 9, 0, 1, 420);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 0.0, false);
      assertTrue(origamiModel0.isProbablyFoldable());
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.buildOrigami(arrayList0, 0.0, false);
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      arrayList0.add(oriLine0);
      arrayList0.add(oriLine0);
      // Undeclared exception!
      try { 
        origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 420, true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine.Type oriLine_Type0 = OriLine.Type.VALLEY;
      oriLine0.setType(oriLine_Type0);
      arrayList0.add(oriLine0);
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3NoDuplicateLines(arrayList0, 0.0);
      assertTrue(origamiModel0.isProbablyFoldable());
      assertEquals(0.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine oriLine1 = new OriLine(oriLine0);
      arrayList0.add(oriLine1);
      OriLine oriLine2 = new OriLine(1, 2, 1, 9, 0);
      oriLine1.p0 = oriLine2.p1;
      oriLine1.setTypeValue(2);
      OriLine oriLine3 = new OriLine(oriLine2);
      oriLine3.changeToNextType();
      arrayList0.add(oriLine3);
      oriLine3.p1 = oriLine0.p0;
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 1, false);
      assertTrue(origamiModel0.hasModel());
      assertFalse(origamiModel0.isProbablyFoldable());
      assertEquals(1.0, origamiModel0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OrigamiModelFactory origamiModelFactory0 = new OrigamiModelFactory();
      ArrayList<OriLine> arrayList0 = new ArrayList<OriLine>();
      OriLine oriLine0 = new OriLine();
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      oriLine0.setType(oriLine_Type0);
      OriLine oriLine1 = new OriLine(oriLine0);
      arrayList0.add(oriLine1);
      OriLine oriLine2 = new OriLine(1, 2, 1, 1, 9);
      oriLine1.p0 = oriLine2.p1;
      OriLine oriLine3 = new OriLine(oriLine2);
      arrayList0.add(oriLine3);
      arrayList0.add(oriLine2);
      oriLine3.p1 = oriLine1.p1;
      OrigamiModel origamiModel0 = origamiModelFactory0.createOrigamiModel3((Collection<OriLine>) arrayList0, (double) 1, true);
      assertEquals(1.0, origamiModel0.getPaperSize(), 0.01);
      assertTrue(origamiModel0.hasModel());
      assertFalse(origamiModel0.isProbablyFoldable());
  }
}
