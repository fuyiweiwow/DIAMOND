/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:09:36 GMT 2018
 */

package diamond.fold;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.OriEdge;
import diamond.fold.OriFace;
import diamond.fold.OriHalfedge;
import diamond.fold.OriVertex;
import java.util.Collection;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OriFace_ESTest extends OriFace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(148.41296289976637, 32.0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      OriVertex oriVertex1 = new OriVertex(0, 2964.6938);
      OriHalfedge oriHalfedge1 = new OriHalfedge(oriVertex1, oriFace0);
      oriFace0.halfedges.add(oriHalfedge1);
      // Undeclared exception!
      try { 
        oriHalfedge1.face.trianglateAndSetColor(false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(445, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 3);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.ev, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      // Undeclared exception!
      try { 
        oriFace0.trianglateAndSetColor(true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(445, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 3);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.ev, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      oriFace0.setPreOutline();
      assertTrue(oriFace0.faceFront);
      assertEquals(0, oriFace0.z_order);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.alreadyStacked);
      assertFalse(oriFace0.tmpFlg);
      assertEquals(0, oriFace0.tmpInt);
      assertFalse(oriFace0.selected);
      assertFalse(oriFace0.hasProblem);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 5);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.right = oriHalfedge0;
      oriFace0.halfedges.add(oriEdge0.right);
      oriFace0.halfedges.add(oriEdge0.left);
      // Undeclared exception!
      try { 
        oriFace0.makeHalfedgeLoop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.right = oriHalfedge0;
      oriFace0.halfedges.add(oriEdge0.right);
      oriFace0.halfedges.addAll(0, (Collection<? extends OriHalfedge>) oriFace0.halfedges);
      oriFace0.makeHalfedgeLoop();
      assertTrue(oriFace0.faceFront);
      assertFalse(oriFace0.tmpFlg);
      assertFalse(oriFace0.hasProblem);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.alreadyStacked);
      assertEquals(0, oriFace0.tmpInt);
      assertEquals(0, oriFace0.z_order);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = oriFace0.getCenter();
      assertFalse(oriFace0.hasProblem);
      assertEquals(Double.NaN, vector2d0.y, 0.01);
      assertFalse(oriFace0.alreadyStacked);
      assertFalse(oriFace0.tmpFlg);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.selected);
      assertEquals(0, oriFace0.z_order);
      assertEquals(0, oriFace0.tmpInt);
      assertTrue(oriFace0.faceFront);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      oriFace0.outline = null;
      // Undeclared exception!
      try { 
        oriFace0.setOutline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        oriFace0.setOutline();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      oriFace0.halfedges = null;
      // Undeclared exception!
      try { 
        oriFace0.getCenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.ev, oriFace0);
      oriHalfedge0.edge = oriEdge0;
      oriFace0.halfedges.add(oriHalfedge0);
      oriFace0.makeHalfedgeLoop();
      oriFace0.halfedges.addAll(0, (Collection<? extends OriHalfedge>) oriFace0.halfedges);
      oriFace0.halfedges.addAll((Collection<? extends OriHalfedge>) oriFace0.halfedges);
      oriFace0.trianglateAndSetColor(true, true);
      assertTrue(oriFace0.faceFront);
      assertFalse(oriFace0.tmpFlg);
      assertFalse(oriFace0.alreadyStacked);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      oriHalfedge0.edge = oriEdge0;
      oriFace0.makeHalfedgeLoop();
      oriFace0.trianglateAndSetColor(false, false);
      assertFalse(oriFace0.tmpFlg);
      assertEquals(0, oriFace0.tmpInt);
      assertTrue(oriFace0.faceFront);
      assertFalse(oriFace0.selected);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      OriEdge oriEdge0 = new OriEdge(oriHalfedge0.vertex, oriVertex0, 0);
      oriHalfedge0.edge = oriEdge0;
      oriEdge0.type = 3;
      oriHalfedge0.face.makeHalfedgeLoop();
      oriHalfedge0.face.trianglateAndSetColor(true, false);
      assertTrue(oriFace0.faceFront);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.hasProblem);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        oriFace0.trianglateAndSetColor(true, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      oriFace0.halfedges.addAll(0, (Collection<? extends OriHalfedge>) oriFace0.halfedges);
      oriFace0.setPreOutline();
      assertTrue(oriFace0.faceFront);
      assertFalse(oriFace0.tmpFlg);
      assertFalse(oriFace0.selected);
      assertFalse(oriFace0.alreadyStacked);
      assertEquals(0, oriFace0.tmpInt2);
      assertEquals(0, oriFace0.z_order);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      // Undeclared exception!
      try { 
        oriFace0.setPreOutline();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2);
      oriFace0.halfedges.add(oriEdge0.right);
      // Undeclared exception!
      try { 
        oriFace0.setPreOutline();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      oriFace0.halfedges.add(oriHalfedge0);
      oriFace0.setOutline();
      assertFalse(oriFace0.tmpFlg);
      assertTrue(oriFace0.faceFront);
      assertFalse(oriFace0.selected);
      assertFalse(oriFace0.hasProblem);
      assertEquals(0, oriFace0.tmpInt);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.alreadyStacked);
      assertEquals(0, oriFace0.z_order);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      oriFace0.printInfo();
      assertEquals(0, oriFace0.tmpInt2);
      assertEquals(0, oriFace0.tmpInt);
      assertFalse(oriFace0.alreadyStacked);
      assertFalse(oriFace0.selected);
      assertEquals(0, oriFace0.z_order);
      assertFalse(oriFace0.tmpFlg);
      assertFalse(oriFace0.hasProblem);
      assertTrue(oriFace0.faceFront);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0.0, (-109.221061530878));
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2);
      oriFace0.halfedges.add(oriEdge0.right);
      // Undeclared exception!
      try { 
        oriFace0.printInfo();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.OriFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(0, 2964.6938);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      Vector2d vector2d0 = oriFace0.getCenter();
      assertEquals(0, oriFace0.tmpInt);
      assertEquals(0, oriFace0.tmpInt2);
      assertFalse(oriFace0.selected);
      assertFalse(oriFace0.alreadyStacked);
      assertFalse(oriFace0.tmpFlg);
      assertEquals(2964.6938, vector2d0.y, 0.01);
      assertTrue(oriFace0.faceFront);
      assertEquals(0, oriFace0.z_order);
      assertFalse(oriFace0.hasProblem);
  }
}
