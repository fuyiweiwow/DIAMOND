/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 15:47:43 GMT 2018
 */

package diamond.fold;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.BoundBox;
import diamond.fold.FoldedModelInfo;
import diamond.fold.Folder;
import diamond.fold.OriEdge;
import diamond.fold.OriFace;
import diamond.fold.OriHalfedge;
import diamond.fold.OriVertex;
import diamond.fold.OrigamiModel;
import diamond.paint.core.PaintConfig;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Folder_ESTest extends Folder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = new Vector2d();
      OriVertex oriVertex0 = new OriVertex(vector2d0);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 2662);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      oriHalfedge0.next = oriEdge0.left;
      OriHalfedge oriHalfedge1 = oriEdge0.left;
      oriHalfedge1.edge = oriEdge0;
      linkedList0.add(oriEdge0.left.face);
      oriHalfedge1.pair = oriHalfedge0;
      oriFace0.halfedges.add(oriHalfedge1);
      origamiModel0.setFaces(linkedList0);
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      // Undeclared exception!
      try { 
        folder0.fold(origamiModel0, foldedModelInfo0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        Folder.matrixCopy((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[][] intArray0 = new int[2][1];
      // Undeclared exception!
      try { 
        Folder.matrixCopy(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[][] intArray0 = new int[0][2];
      Folder.matrixCopy(intArray0, intArray0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-19));
      ArrayList<OriFace> arrayList0 = new ArrayList<OriFace>();
      OriFace oriFace0 = new OriFace();
      arrayList0.add(oriFace0);
      LinkedList<OriEdge> linkedList0 = new LinkedList<OriEdge>();
      OriEdge oriEdge0 = new OriEdge();
      linkedList0.add(oriEdge0);
      origamiModel0.setEdges(linkedList0);
      origamiModel0.setFaces(arrayList0);
      // Undeclared exception!
      try { 
        folder0.foldWithoutLineType(origamiModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      Vector2d vector2d0 = new Vector2d(0, 0.0F);
      PaintConfig.bDoFullEstimation = false;
      OriVertex oriVertex0 = new OriVertex(vector2d0);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.ev, oriFace0);
      oriFace0.halfedges.add(oriHalfedge0);
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      int int0 = folder0.fold(origamiModel0, foldedModelInfo0);
      assertTrue(origamiModel0.isFolded());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      OriHalfedge oriHalfedge1 = oriEdge0.left;
      linkedList0.add(oriEdge0.left.face);
      oriHalfedge1.pair = oriHalfedge0;
      oriFace0.halfedges.add(oriHalfedge1);
      origamiModel0.setFaces(linkedList0);
      BoundBox boundBox0 = folder0.foldWithoutLineType(origamiModel0);
      assertNotNull(boundBox0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      linkedList0.add(oriEdge0.left.face);
      oriFace0.halfedges.add(oriHalfedge0);
      origamiModel0.setFaces(linkedList0);
      BoundBox boundBox0 = folder0.foldWithoutLineType(origamiModel0);
      assertNotNull(boundBox0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      linkedList0.add(oriEdge0.left.face);
      origamiModel0.setFaces(linkedList0);
      // Undeclared exception!
      try { 
        folder0.foldWithoutLineType(origamiModel0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      oriEdge0.type = 2;
      oriHalfedge0.next = oriEdge0.left;
      OriHalfedge oriHalfedge1 = oriEdge0.left;
      oriHalfedge1.edge = oriEdge0;
      linkedList0.add(oriEdge0.left.face);
      oriHalfedge1.pair = oriHalfedge0;
      oriFace0.halfedges.add(oriHalfedge1);
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      int int0 = folder0.fold(origamiModel0, foldedModelInfo0);
      assertEquals(1, foldedModelInfo0.getFoldablePatternCount());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OrigamiModel origamiModel0 = new OrigamiModel(24);
      ArrayList<OriFace> arrayList0 = new ArrayList<OriFace>();
      OriFace oriFace0 = new OriFace();
      arrayList0.add(oriFace0);
      LinkedList<OriEdge> linkedList0 = new LinkedList<OriEdge>();
      OriEdge oriEdge0 = new OriEdge();
      linkedList0.add(oriEdge0);
      origamiModel0.setEdges(linkedList0);
      origamiModel0.setFaces(arrayList0);
      Folder folder0 = new Folder();
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      // Undeclared exception!
      try { 
        folder0.fold(origamiModel0, foldedModelInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.Folder", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      oriHalfedge0.next = oriEdge0.left;
      OriHalfedge oriHalfedge1 = oriEdge0.left;
      oriHalfedge1.edge = oriEdge0;
      linkedList0.add(oriEdge0.left.face);
      oriHalfedge1.pair = oriHalfedge0;
      oriFace0.halfedges.add(oriHalfedge1);
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      int int0 = folder0.fold(origamiModel0, foldedModelInfo0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Folder folder0 = new Folder();
      OrigamiModel origamiModel0 = new OrigamiModel((-1036.4));
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      OriVertex oriVertex0 = new OriVertex(Double.NaN, Double.NaN);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriEdge0.sv, oriFace0);
      oriEdge0.left = oriHalfedge0;
      oriHalfedge0.next = oriEdge0.left;
      linkedList0.add(oriEdge0.left.face);
      oriFace0.halfedges.add(oriHalfedge0.next);
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      int int0 = folder0.fold(origamiModel0, foldedModelInfo0);
      assertEquals(1, int0);
  }
}
