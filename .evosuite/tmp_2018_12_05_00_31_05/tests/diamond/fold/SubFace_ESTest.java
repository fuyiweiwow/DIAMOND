/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:40:11 GMT 2018
 */

package diamond.fold;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.Condition3;
import diamond.fold.OriEdge;
import diamond.fold.OriFace;
import diamond.fold.OriHalfedge;
import diamond.fold.OriVertex;
import diamond.fold.SubFace;
import java.util.ArrayList;
import java.util.List;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SubFace_ESTest extends SubFace_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      assertFalse(subFace0.allFaceOrderDecided);
      
      int[][] intArray0 = new int[7][9];
      int[] intArray1 = new int[1];
      intArray1[0] = 2934;
      intArray0[0] = intArray1;
      int int0 = subFace0.sortFaceOverlapOrder(subFace0.sortedFaces, intArray0);
      assertTrue(subFace0.allFaceOrderDecided);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      ArrayList<OriFace> arrayList0 = subFace0.faces;
      int[][] intArray0 = new int[3][9];
      arrayList0.add(0, subFace0.outline);
      arrayList0.add(subFace0.outline);
      arrayList0.add(oriFace0);
      subFace0.sortFaceOverlapOrder(arrayList0, intArray0);
      assertTrue(arrayList0.contains(oriFace0));
      assertEquals(0, oriFace0.tmpInt2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      OriVertex oriVertex0 = new OriVertex(5.4997778862146, 1456.0);
      OriEdge oriEdge0 = new OriEdge(oriVertex0, oriVertex0, 0);
      OriHalfedge oriHalfedge0 = new OriHalfedge(oriVertex0, subFace0.outline);
      oriEdge0.right = oriHalfedge0;
      oriFace0.halfedges.add(oriEdge0.right);
      Vector2d vector2d0 = subFace0.getInnerPoint();
      assertEquals(5.4997778862146, vector2d0.x, 0.01);
      assertFalse(subFace0.allFaceOrderDecided);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[7][1];
      ArrayList<Condition3> arrayList0 = subFace0.condition3s;
      Condition3 condition3_0 = new Condition3();
      int[] intArray1 = new int[7];
      intArray1[0] = 9;
      arrayList0.add(condition3_0);
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        subFace0.sortFaceOverlapOrder((List<OriFace>) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.SubFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      OriFace oriFace1 = new OriFace();
      subFace0.outline = oriFace1;
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[7][1];
      Condition3 condition3_0 = new Condition3();
      subFace0.condition3s.add(condition3_0);
      condition3_0.upper = 34;
      int[] intArray1 = new int[7];
      intArray1[0] = 9;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        subFace0.sortFaceOverlapOrder(subFace0.faces, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 34, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[0][4];
      subFace0.faces.add(oriFace0);
      // Undeclared exception!
      try { 
        subFace0.sortFaceOverlapOrder(subFace0.faces, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("diamond.fold.SubFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 9;
      intArray0[0] = intArray1;
      int int0 = subFace0.sortFaceOverlapOrder(subFace0.sortedFaces, intArray0);
      assertEquals((-1), oriFace0.tmpInt2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[7][1];
      Condition3 condition3_0 = new Condition3();
      subFace0.condition3s.add(condition3_0);
      int[] intArray1 = new int[7];
      condition3_0.other = 1;
      intArray1[0] = 9;
      intArray0[0] = intArray1;
      int int0 = subFace0.sortFaceOverlapOrder(subFace0.faces, intArray0);
      assertEquals((-1), oriFace0.tmpInt2);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      Vector2d vector2d0 = subFace0.getInnerPoint();
      assertEquals(Double.NaN, vector2d0.y, 0.01);
      assertFalse(subFace0.allFaceOrderDecided);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      oriFace0.halfedges.add((OriHalfedge) null);
      SubFace subFace0 = new SubFace(oriFace0);
      // Undeclared exception!
      try { 
        subFace0.getInnerPoint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.fold.SubFace", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      OriFace oriFace1 = new OriFace();
      subFace0.outline = oriFace1;
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[6][1];
      Condition3 condition3_0 = new Condition3();
      condition3_0.lower = 1;
      int[] intArray1 = new int[1];
      intArray1[0] = 9;
      subFace0.condition3s.add(condition3_0);
      intArray0[0] = intArray1;
      int int0 = subFace0.sortFaceOverlapOrder(subFace0.faces, intArray0);
      assertEquals((-1), oriFace0.tmpInt2);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OriFace oriFace0 = new OriFace();
      SubFace subFace0 = new SubFace(oriFace0);
      OriFace oriFace1 = new OriFace();
      subFace0.outline = oriFace1;
      subFace0.faces.add(oriFace0);
      subFace0.faces.add(subFace0.outline);
      int[][] intArray0 = new int[6][1];
      Condition3 condition3_0 = new Condition3();
      int[] intArray1 = new int[1];
      subFace0.condition3s.add(condition3_0);
      intArray1[0] = 9;
      intArray0[0] = intArray1;
      int int0 = subFace0.sortFaceOverlapOrder(subFace0.faces, intArray0);
      assertEquals((-1), oriFace0.tmpInt2);
      assertEquals(2, int0);
  }
}
