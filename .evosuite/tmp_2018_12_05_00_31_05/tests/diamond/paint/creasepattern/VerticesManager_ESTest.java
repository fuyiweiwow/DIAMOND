/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:07:30 GMT 2018
 */

package diamond.paint.creasepattern;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.geom.Segment;
import diamond.paint.creasepattern.VerticesManager;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import java.util.Collection;
import java.util.LinkedList;
import javax.vecmath.Point2d;
import javax.vecmath.Tuple2d;
import javax.vecmath.Vector2d;
import javax.vecmath.Vector2f;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VerticesManager_ESTest extends VerticesManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(1.0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      OriPoint oriPoint0 = new OriPoint();
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertNotNull(oriPoint0);
      
      Vector2f vector2f0 = new Vector2f((Vector2d) oriPoint0);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertNotNull(vector2f0);
      
      Vector2d vector2d0 = new Vector2d(vector2f0);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertNotNull(vector2d0);
      
      VerticesManager.AreaPosition verticesManager_AreaPosition0 = verticesManager0.new AreaPosition(vector2d0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0F, vector2f0.y, 0.01F);
      assertEquals(0.0F, vector2f0.x, 0.01F);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals(16, verticesManager_AreaPosition0.y);
      assertEquals(16, verticesManager_AreaPosition0.x);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager_AreaPosition0);
      
      verticesManager0.clear();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(766.564141481);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector2d vector2d0 = new Vector2d();
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertNotNull(vector2d0);
      
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 32);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertFalse(oriLine0.selected);
      assertEquals(32, oriLine0.typeVal);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine0.getTypeValue());
      assertNotNull(oriLine0);
      
      boolean boolean0 = linkedList0.add(oriLine0);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertFalse(oriLine0.selected);
      assertEquals(32, oriLine0.typeVal);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(1, linkedList0.size());
      assertEquals(32, oriLine0.getTypeValue());
      assertTrue(linkedList0.contains(oriLine0));
      assertTrue(boolean0);
      
      verticesManager0.load(linkedList0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(oriLine0));
      
      Vector2d vector2d1 = new Vector2d();
      assertEquals(0.0, vector2d1.x, 0.01);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertNotNull(vector2d1);
      assertTrue(vector2d1.equals((Object)vector2d0));
      
      verticesManager0.remove(vector2d1);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, vector2d1.x, 0.01);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(vector2d1, vector2d0);
      assertTrue(vector2d1.equals((Object)vector2d0));
      
      verticesManager0.clear();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(53.74499724, (-734.324311), 766.564141481);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
      
      verticesManager0.add(vector2d1);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, vector2d1.x, 0.01);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(vector2d1, vector2d0);
      assertTrue(vector2d1.equals((Object)vector2d0));
      
      Collection<Collection<Vector2d>> collection1 = verticesManager0.getArea(210.21991, (-1.0), 53.74499724);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertFalse(collection1.equals((Object)collection0));
      
      Collection<Vector2d> collection2 = verticesManager0.getAround(vector2d1);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, vector2d1.x, 0.01);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(vector2d1, vector2d0);
      assertNotNull(collection2);
      assertTrue(collection2.contains(vector2d0));
      assertTrue(vector2d1.equals((Object)vector2d0));
      
      VerticesManager.AreaPosition verticesManager_AreaPosition0 = verticesManager0.new AreaPosition(383.2820707405, 0.0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertEquals(31, verticesManager_AreaPosition0.x);
      assertEquals(16, verticesManager_AreaPosition0.y);
      assertFalse(verticesManager0.isEmpty());
      assertNotNull(verticesManager_AreaPosition0);
      
      boolean boolean1 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      verticesManager0.add(vector2d1);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, vector2d1.x, 0.01);
      assertEquals(0.0, vector2d1.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(vector2d1, vector2d0);
      assertTrue(vector2d1.equals((Object)vector2d0));
      
      boolean boolean2 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(23.95512942128125, verticesManager0.interval, 0.01);
      assertEquals(383.2820707405, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = (-1.0);
      VerticesManager verticesManager0 = new VerticesManager((-1.0));
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Vector2d vector2d0 = null;
      double double1 = 0.0;
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, 0.0, (-1.0));
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
      
      verticesManager0.interval = 0.0;
      assertTrue(verticesManager0.isEmpty());
      
      // Undeclared exception!
      try { 
        verticesManager0.add((Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager$AreaPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-1.0));
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      OriPoint oriPoint0 = new OriPoint();
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertNotNull(oriPoint0);
      
      verticesManager0.add(oriPoint0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      Collection<Vector2d> collection0 = verticesManager0.getAround(oriPoint0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 690.80652928;
      VerticesManager verticesManager0 = new VerticesManager(690.80652928);
      assertEquals(21.58770404, verticesManager0.interval, 0.01);
      assertEquals(345.40326464, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      boolean boolean0 = verticesManager0.isEmpty();
      assertEquals(21.58770404, verticesManager0.interval, 0.01);
      assertEquals(345.40326464, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        verticesManager0.getAround((Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager$AreaPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-2480.08153829275));
      assertEquals((-77.50254807164843), verticesManager0.interval, 0.01);
      assertEquals((-1240.040769146375), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Point2d point2d0 = new Point2d((-77.50254807164843), 0.0);
      assertEquals(0.0, point2d0.y, 0.01);
      assertEquals((-77.50254807164843), point2d0.x, 0.01);
      assertNotNull(point2d0);
      
      Vector2d vector2d0 = new Vector2d(point2d0);
      assertEquals(0.0, point2d0.y, 0.01);
      assertEquals((-77.50254807164843), point2d0.x, 0.01);
      assertEquals((-77.50254807164843), vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertNotNull(vector2d0);
      
      OriLine oriLine0 = new OriLine(0.0, 0.0, 27.404888648, 0.0, 32);
      assertEquals(32, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine0.getTypeValue());
      assertNotNull(oriLine0);
      
      OriPoint oriPoint0 = oriLine0.p0;
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertNotNull(oriPoint0);
      
      point2d0.negate((Tuple2d) oriPoint0);
      assertEquals(-0.0, point2d0.y, 0.01);
      assertEquals(-0.0, point2d0.x, 0.01);
      assertEquals(32, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(32, oriLine0.getTypeValue());
      
      vector2d0.sub((Tuple2d) point2d0);
      assertEquals(-0.0, point2d0.y, 0.01);
      assertEquals(-0.0, point2d0.x, 0.01);
      assertEquals((-77.50254807164843), vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      
      boolean boolean0 = vector2d0.equals((Object) verticesManager0);
      assertEquals((-77.50254807164843), verticesManager0.interval, 0.01);
      assertEquals((-1240.040769146375), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(-0.0, point2d0.y, 0.01);
      assertEquals(-0.0, point2d0.x, 0.01);
      assertEquals((-77.50254807164843), vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertFalse(boolean0);
      
      verticesManager0.add(vector2d0);
      assertEquals((-77.50254807164843), verticesManager0.interval, 0.01);
      assertEquals((-1240.040769146375), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(-0.0, point2d0.y, 0.01);
      assertEquals(-0.0, point2d0.x, 0.01);
      assertEquals((-77.50254807164843), vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      boolean boolean1 = verticesManager0.isEmpty();
      assertEquals((-77.50254807164843), verticesManager0.interval, 0.01);
      assertEquals((-1240.040769146375), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      verticesManager0.remove(vector2d0);
      assertEquals((-77.50254807164843), verticesManager0.interval, 0.01);
      assertEquals((-1240.040769146375), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(-0.0, point2d0.y, 0.01);
      assertEquals(-0.0, point2d0.x, 0.01);
      assertEquals((-77.50254807164843), vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertTrue(verticesManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(2102.62759);
      assertEquals(65.7071121875, verticesManager0.interval, 0.01);
      assertEquals(1051.313795, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OriPoint oriPoint0 = new OriPoint(5341.447454, 1051.313795);
      assertEquals(5341.447454, oriPoint0.x, 0.01);
      assertEquals(1051.313795, oriPoint0.y, 0.01);
      assertNotNull(oriPoint0);
      
      OriLine oriLine0 = new OriLine(oriPoint0, oriPoint0, 32);
      assertEquals(5341.447454, oriPoint0.x, 0.01);
      assertEquals(1051.313795, oriPoint0.y, 0.01);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(32, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(32, oriLine0.getTypeValue());
      assertNotNull(oriLine0);
      
      boolean boolean0 = linkedList0.add(oriLine0);
      assertEquals(5341.447454, oriPoint0.x, 0.01);
      assertEquals(1051.313795, oriPoint0.y, 0.01);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(32, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(1, linkedList0.size());
      assertEquals(32, oriLine0.getTypeValue());
      assertTrue(linkedList0.contains(oriLine0));
      assertTrue(boolean0);
      
      OriLine oriLine1 = new OriLine(32, 32, 5341.447454, 1.0, 32);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine1.typeVal);
      assertFalse(oriLine1.selected);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine1.getTypeValue());
      assertNotNull(oriLine1);
      assertFalse(oriLine1.equals((Object)oriLine0));
      
      oriLine1.setTypeValue(32);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine1.typeVal);
      assertFalse(oriLine1.selected);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine1.getTypeValue());
      assertNotSame(oriLine1, oriLine0);
      assertFalse(oriLine1.equals((Object)oriLine0));
      
      OriLine oriLine2 = new OriLine(oriLine1);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine1.typeVal);
      assertFalse(oriLine1.selected);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine2.typeVal);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(0, OriLine.TYPE_NONE);
      assertFalse(oriLine2.selected);
      assertEquals(32, oriLine1.getTypeValue());
      assertEquals(32, oriLine2.getTypeValue());
      assertNotNull(oriLine2);
      assertFalse(oriLine1.equals((Object)oriLine0));
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertFalse(oriLine2.equals((Object)oriLine0));
      
      Segment segment0 = oriLine2.getSegment();
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine1.typeVal);
      assertFalse(oriLine1.selected);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine2.typeVal);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(0, OriLine.TYPE_NONE);
      assertFalse(oriLine2.selected);
      assertEquals(32, oriLine1.getTypeValue());
      assertEquals(32, oriLine2.getTypeValue());
      assertNotSame(oriLine1, oriLine2);
      assertNotSame(oriLine1, oriLine0);
      assertNotSame(oriLine2, oriLine0);
      assertNotSame(oriLine2, oriLine1);
      assertNotNull(segment0);
      assertTrue(oriLine1.equals((Object)oriLine2));
      assertFalse(oriLine1.equals((Object)oriLine0));
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertFalse(oriLine2.equals((Object)oriLine0));
      
      boolean boolean1 = linkedList0.add(oriLine2);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(32, oriLine1.typeVal);
      assertFalse(oriLine1.selected);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(32, oriLine2.typeVal);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(0, OriLine.TYPE_NONE);
      assertFalse(oriLine2.selected);
      assertEquals(2, linkedList0.size());
      assertEquals(32, oriLine1.getTypeValue());
      assertEquals(32, oriLine2.getTypeValue());
      assertNotSame(oriLine1, oriLine2);
      assertNotSame(oriLine1, oriLine0);
      assertNotSame(oriLine2, oriLine0);
      assertNotSame(oriLine2, oriLine1);
      assertTrue(linkedList0.contains(oriLine2));
      assertTrue(boolean1);
      assertTrue(oriLine1.equals((Object)oriLine2));
      assertFalse(oriLine1.equals((Object)oriLine0));
      assertTrue(oriLine2.equals((Object)oriLine1));
      assertFalse(oriLine2.equals((Object)oriLine0));
      assertTrue(boolean1 == boolean0);
      
      verticesManager0.load(linkedList0);
      assertEquals(65.7071121875, verticesManager0.interval, 0.01);
      assertEquals(1051.313795, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertFalse(verticesManager0.isEmpty());
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(oriLine2));
      
      OriPoint oriPoint1 = new OriPoint(0.0, 2102.62759);
      assertEquals(2102.62759, oriPoint1.y, 0.01);
      assertEquals(0.0, oriPoint1.x, 0.01);
      assertNotNull(oriPoint1);
      assertFalse(oriPoint1.equals((Object)oriPoint0));
      
      verticesManager0.add(oriPoint1);
      assertEquals(65.7071121875, verticesManager0.interval, 0.01);
      assertEquals(1051.313795, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(2102.62759, oriPoint1.y, 0.01);
      assertEquals(0.0, oriPoint1.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(oriPoint1, oriPoint0);
      assertFalse(oriPoint1.equals((Object)oriPoint0));
      
      verticesManager0.add(oriPoint1);
      assertEquals(65.7071121875, verticesManager0.interval, 0.01);
      assertEquals(1051.313795, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(2102.62759, oriPoint1.y, 0.01);
      assertEquals(0.0, oriPoint1.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotSame(oriPoint1, oriPoint0);
      assertFalse(oriPoint1.equals((Object)oriPoint0));
      
      verticesManager0.changePaperSize(32);
      assertEquals(1.0, verticesManager0.interval, 0.01);
      assertEquals(16.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertFalse(verticesManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(1845.95539);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(922.977695, verticesManager0.paperCenter, 0.01);
      assertEquals(57.6861059375, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, 0.0, 0.0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(922.977695, verticesManager0.paperCenter, 0.01);
      assertEquals(57.6861059375, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
      
      Collection<Collection<Vector2d>> collection1 = verticesManager0.getArea(0.0, 1364.901514611, 1364.901514611);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(922.977695, verticesManager0.paperCenter, 0.01);
      assertEquals(57.6861059375, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertFalse(collection1.equals((Object)collection0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, (-1.0), 2098.3858);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, (-695.293469609118), 1.0);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-163.8020958812));
      assertEquals((-81.9010479406), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-5.1188154962875), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, 0.0, 522.0);
      assertEquals((-81.9010479406), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-5.1188154962875), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(529.3);
      assertEquals(16.540625, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(264.65, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      double double0 = 0.0;
      verticesManager0.paperCenter = 0.0;
      assertTrue(verticesManager0.isEmpty());
      
      // Undeclared exception!
      try { 
        verticesManager0.load((Collection<OriLine>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      verticesManager0.interval = 0.0;
      assertTrue(verticesManager0.isEmpty());
      
      verticesManager0.clear();
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      
      verticesManager0.changePaperSize(0.0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      
      verticesManager0.clear();
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      
      Vector2d vector2d0 = new Vector2d();
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertNotNull(vector2d0);
      
      OriPoint oriPoint0 = new OriPoint();
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertNotNull(oriPoint0);
      
      oriPoint0.clampMin(231.076);
      assertEquals(231.076, oriPoint0.y, 0.01);
      assertEquals(231.076, oriPoint0.x, 0.01);
      
      oriPoint0.sub((Tuple2d) vector2d0);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals(231.076, oriPoint0.y, 0.01);
      assertEquals(231.076, oriPoint0.x, 0.01);
      
      oriPoint0.interpolate((Tuple2d) vector2d0, (Tuple2d) vector2d0, 2064.785);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      
      oriPoint0.scale(0.0);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      
      vector2d0.scaleAdd(0.0, (Tuple2d) oriPoint0);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      
      verticesManager0.add(vector2d0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      verticesManager0.clear();
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertTrue(verticesManager0.isEmpty());
      
      // Undeclared exception!
      try { 
        verticesManager0.remove(vector2d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Collection<Collection<Vector2d>> collection0 = verticesManager0.getArea(0.0, 0.0, 0.0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      OriLine oriLine0 = new OriLine(32.0, 32.0, (-2062.03359), 0.0, 32);
      assertFalse(oriLine0.selected);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(32, oriLine0.typeVal);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(32, oriLine0.getTypeValue());
      assertNotNull(oriLine0);
      
      OriPoint oriPoint0 = oriLine0.p1;
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals((-2062.03359), oriPoint0.x, 0.01);
      assertNotNull(oriPoint0);
      
      verticesManager0.add(oriPoint0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertFalse(oriLine0.selected);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(32, oriLine0.typeVal);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals((-2062.03359), oriPoint0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertEquals(32, oriLine0.getTypeValue());
      
      verticesManager0.paperCenter = 0.0;
      assertFalse(verticesManager0.isEmpty());
      
      VerticesManager.AreaPosition verticesManager_AreaPosition0 = verticesManager0.new AreaPosition(0.0, (-1.0));
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(0, verticesManager_AreaPosition0.y);
      assertEquals(0, verticesManager_AreaPosition0.x);
      assertFalse(verticesManager0.isEmpty());
      assertNotNull(verticesManager_AreaPosition0);
      
      boolean boolean0 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(480.380397937);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(15.01188743553125, verticesManager0.interval, 0.01);
      assertEquals(240.1901989685, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      boolean boolean0 = verticesManager0.isEmpty();
      assertEquals(32, VerticesManager.divNum);
      assertEquals(15.01188743553125, verticesManager0.interval, 0.01);
      assertEquals(240.1901989685, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(1300.53480753);
      assertEquals(40.6417127353125, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(650.267403765, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      OriLine oriLine0 = new OriLine();
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(0, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(0, oriLine0.getTypeValue());
      assertNotNull(oriLine0);
      
      boolean boolean0 = linkedList0.add(oriLine0);
      assertEquals(3, OriLine.TYPE_VALLEY);
      assertEquals(2, OriLine.TYPE_RIDGE);
      assertEquals(1, OriLine.TYPE_CUT);
      assertEquals(0, oriLine0.typeVal);
      assertFalse(oriLine0.selected);
      assertEquals(0, OriLine.TYPE_NONE);
      assertEquals(1, linkedList0.size());
      assertEquals(0, oriLine0.getTypeValue());
      assertTrue(linkedList0.contains(oriLine0));
      assertTrue(boolean0);
      
      verticesManager0.load(linkedList0);
      assertEquals(40.6417127353125, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(650.267403765, verticesManager0.paperCenter, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(oriLine0));
      
      OriPoint oriPoint0 = new OriPoint();
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertNotNull(oriPoint0);
      
      Collection<Vector2d> collection0 = verticesManager0.getAround(oriPoint0);
      assertEquals(40.6417127353125, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(650.267403765, verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(5180.403747122);
      assertEquals(161.8876170975625, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(2590.201873561, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      OriPoint oriPoint0 = new OriPoint(2590.201873561, 32);
      assertEquals(32.0, oriPoint0.y, 0.01);
      assertEquals(2590.201873561, oriPoint0.x, 0.01);
      assertNotNull(oriPoint0);
      
      Collection<Vector2d> collection0 = verticesManager0.getAround(oriPoint0);
      assertEquals(161.8876170975625, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(2590.201873561, verticesManager0.paperCenter, 0.01);
      assertEquals(32.0, oriPoint0.y, 0.01);
      assertEquals(2590.201873561, oriPoint0.x, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-1.0));
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      verticesManager0.load(linkedList0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-0.5), verticesManager0.paperCenter, 0.01);
      assertEquals((-0.03125), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Vector2d vector2d0 = new Vector2d(0.0, 0.0);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertEquals(0.0, vector2d0.x, 0.01);
      assertNotNull(vector2d0);
      
      // Undeclared exception!
      try { 
        verticesManager0.remove(vector2d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-122.022));
      assertEquals((-61.011), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-3.8131875), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      verticesManager0.clear();
      assertEquals((-61.011), verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-3.8131875), verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-1375.57294));
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-42.986654375), verticesManager0.interval, 0.01);
      assertEquals((-687.78647), verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      OriPoint oriPoint0 = new OriPoint();
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertNotNull(oriPoint0);
      
      verticesManager0.add(oriPoint0);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-42.986654375), verticesManager0.interval, 0.01);
      assertEquals((-687.78647), verticesManager0.paperCenter, 0.01);
      assertEquals(0.0, oriPoint0.y, 0.01);
      assertEquals(0.0, oriPoint0.x, 0.01);
      assertFalse(verticesManager0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager((-692.334472143));
      assertEquals((-21.63545225446875), verticesManager0.interval, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals((-346.1672360715), verticesManager0.paperCenter, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      VerticesManager verticesManager0 = new VerticesManager(0.0);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertTrue(verticesManager0.isEmpty());
      assertNotNull(verticesManager0);
      
      Vector2d vector2d0 = new Vector2d(2390.191009760303, 0.0);
      assertEquals(2390.191009760303, vector2d0.x, 0.01);
      assertEquals(0.0, vector2d0.y, 0.01);
      assertNotNull(vector2d0);
      
      Point2d point2d0 = new Point2d(2390.191009760303, 0.0);
      assertEquals(0.0, point2d0.y, 0.01);
      assertEquals(2390.191009760303, point2d0.x, 0.01);
      assertNotNull(point2d0);
      
      vector2d0.negate((Tuple2d) point2d0);
      assertEquals((-2390.191009760303), vector2d0.x, 0.01);
      assertEquals(-0.0, vector2d0.y, 0.01);
      assertEquals(0.0, point2d0.y, 0.01);
      assertEquals(2390.191009760303, point2d0.x, 0.01);
      
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      verticesManager0.add(vector2d0);
      assertEquals(0.0, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.0, verticesManager0.interval, 0.01);
      assertEquals((-2390.191009760303), vector2d0.x, 0.01);
      assertEquals(-0.0, vector2d0.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      double double1 = 1.0;
      verticesManager0.changePaperSize(1.0);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      verticesManager0.add(vector2d0);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertEquals((-2390.191009760303), vector2d0.x, 0.01);
      assertEquals(-0.0, vector2d0.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      verticesManager0.remove(vector2d0);
      assertEquals(0.5, verticesManager0.paperCenter, 0.01);
      assertEquals(32, VerticesManager.divNum);
      assertEquals(0.03125, verticesManager0.interval, 0.01);
      assertEquals((-2390.191009760303), vector2d0.x, 0.01);
      assertEquals(-0.0, vector2d0.y, 0.01);
      assertFalse(verticesManager0.isEmpty());
      
      // Undeclared exception!
      try { 
        verticesManager0.remove(vector2d0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VerticesManager verticesManager0 = new VerticesManager(766.564141481);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      Vector2d vector2d0 = new Vector2d();
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 32);
      linkedList0.add(oriLine0);
      verticesManager0.load(linkedList0);
      Vector2d vector2d1 = new Vector2d();
      verticesManager0.remove(vector2d1);
      verticesManager0.clear();
      verticesManager0.getArea(53.74499724, (-734.324311), 766.564141481);
      verticesManager0.getAround(vector2d1);
      VerticesManager.AreaPosition verticesManager_AreaPosition0 = verticesManager0.new AreaPosition(383.2820707405, 0.0);
      verticesManager0.isEmpty();
      assertTrue(verticesManager0.isEmpty());
      
      verticesManager0.add(vector2d1);
      verticesManager0.isEmpty();
      boolean boolean0 = verticesManager0.isEmpty();
      assertFalse(boolean0);
  }
}
