/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:53:44 GMT 2018
 */

package diamond.paint.creasepattern.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.paint.creasepattern.tool.LineAdder;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import javax.vecmath.Tuple2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineAdder_ESTest extends LineAdder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriLine oriLine0 = new OriLine(701.806243, 701.806243, 0.0, 2107.42207497495, (-9));
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      lineAdder0.addLine(oriLine0, linkedList0);
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      lineAdder0.addAll(linkedList0, linkedList1);
      assertTrue(linkedList1.contains(oriLine0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, 0.0, 1283.210832750201, 0.0, 0);
      OriLine oriLine1 = new OriLine(0.0, 0.0, 0.0, 1.0, 0);
      OriPoint oriPoint0 = new OriPoint();
      oriPoint0.set((Tuple2d) oriLine0.p1);
      lineAdder0.addLine(oriLine1, linkedList0);
      oriLine1.p0 = oriPoint0;
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriLine oriLine0 = new OriLine(701.806243, 701.806243, 0.0, 2107.42207497495, (-9));
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      lineAdder0.addLine(oriLine0, linkedList0);
      OriLine oriLine1 = new OriLine((-9), 1497.8148, 0.0, 0.0, 0);
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine();
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine(0.0, 0.0, 0, 1.0, 0);
      oriLine1.p0 = oriLine1.p1;
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriLine oriLine0 = new OriLine(701.806243, 701.806243, 0.0, 2107.42207497495, (-9));
      OriLine oriLine1 = new OriLine(oriLine0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      lineAdder0.addLine(oriLine1, linkedList0);
      oriLine0.p1 = oriLine1.p0;
      lineAdder0.addLine(oriLine0, linkedList0);
      assertTrue(linkedList0.contains(oriLine1));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriLine oriLine0 = new OriLine();
      // Undeclared exception!
      try { 
        lineAdder0.addLine(oriLine0, (Collection<OriLine>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.tool.LineAdder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add((OriLine) null);
      // Undeclared exception!
      try { 
        lineAdder0.addAll(linkedList0, linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriLine oriLine0 = new OriLine(701.806243, 701.806243, 0.0, 2107.42207497495, (-9));
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      lineAdder0.addLine(oriLine0, linkedList0);
      lineAdder0.addLine(oriLine0, linkedList0);
      assertTrue(linkedList0.contains(oriLine0));
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, 1, 1283.210832750201, 1, 0);
      lineAdder0.addLine(oriLine0, linkedList0);
      OriLine oriLine1 = new OriLine(0.0, 0.0, 0, 1.0, 0);
      OriPoint oriPoint0 = new OriPoint(0, 0);
      oriLine1.p0 = oriPoint0;
      lineAdder0.addLine(oriLine1, linkedList0);
      oriPoint0.interpolate((Tuple2d) oriLine1.p1, (Tuple2d) oriLine1.p0, 2836.304949310808);
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(3, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine();
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine(0.0, 1, 1283.210832750201, 1, 0);
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(2, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      OriPoint oriPoint0 = new OriPoint();
      oriPoint0.set(954.20410398, (-177.47579522045));
      OriLine oriLine0 = new OriLine(oriPoint0, oriPoint0, 0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.offerLast(oriLine0);
      oriLine0.p0.negate();
      OriLine oriLine1 = new OriLine(0.017453292519943295, 0.017453292519943295, (-177.47579522045), 2, 3);
      lineAdder0.addLine(oriLine1, linkedList0);
      lineAdder0.addLine(oriLine0, linkedList0);
      assertEquals(5, linkedList0.size());
      assertFalse(linkedList0.contains(oriLine0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0, 0, 2, 0, 0);
      lineAdder0.addLine(oriLine0, linkedList0);
      OriLine oriLine1 = new OriLine(3, 3, 1, 2, 0);
      oriLine1.p0 = oriLine0.p0;
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(linkedList0.contains(oriLine0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(3, Double.NaN, 1, 2, 3);
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        lineAdder0.addAll(linkedList0, linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LineAdder lineAdder0 = new LineAdder();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, 0.0, 1301.8976191637307, 0.0, 0);
      lineAdder0.addLine(oriLine0, linkedList0);
      OriLine oriLine1 = new OriLine(0.0, 0.0, 0.0, 1.0, 0);
      OriPoint oriPoint0 = oriLine0.p1;
      oriLine1.p0 = oriPoint0;
      oriPoint0.interpolate((Tuple2d) oriLine1.p1, (Tuple2d) oriLine1.p0, 2836.304949310808);
      lineAdder0.addLine(oriLine1, linkedList0);
      lineAdder0.addLine(oriLine1, linkedList0);
      assertEquals(6, linkedList0.size());
  }
}
