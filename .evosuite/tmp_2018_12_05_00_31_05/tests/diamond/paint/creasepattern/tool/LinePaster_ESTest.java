/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:19:29 GMT 2018
 */

package diamond.paint.creasepattern.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.paint.creasepattern.tool.LinePaster;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinePaster_ESTest extends LinePaster_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(3199.9637854, 3199.9637854, 3199.9637854, 2.0, 1167533019);
      OriPoint oriPoint0 = new OriPoint(1420.956, (-1.0));
      oriLine0.p1 = oriPoint0;
      OriLine oriLine1 = new OriLine(oriLine0);
      linkedList1.add(oriLine1);
      OriLine oriLine2 = new OriLine();
      oriLine2.p0 = oriLine1.p1;
      linkedList0.add(oriLine2);
      linePaster0.paste(linkedList0, linkedList1);
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, (-154.4), 1367, 0.0, 846);
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine((-1), (-1), 1367, (-1), (-1));
      linkedList1.add(oriLine1);
      linePaster0.paste(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(4, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, (-154.4), 1367, 0.0, 837);
      OriLine oriLine1 = new OriLine((-1), (-1), 1367, (-1), (-1));
      linkedList1.add(oriLine1);
      OriLine oriLine2 = new OriLine(oriLine0.p0, oriLine1.p0, 1);
      linkedList0.add(oriLine2);
      linePaster0.paste(linkedList0, linkedList1);
      linePaster0.paste(linkedList0, linkedList1);
      assertEquals(2, linkedList1.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine((-2684.05581545829), (-2684.05581545829), (-1), (-2684.05581545829), 0);
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine((-1), (-1), (-1), (-1), (-1));
      linkedList1.add(oriLine1);
      linePaster0.paste(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      Vector2d vector2d0 = new Vector2d((-483.9032187368254), 0.0);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, (-1));
      List<OriLine> list0 = linkedList0.subList(0, 0);
      linkedList0.add(oriLine0);
      // Undeclared exception!
      try { 
        linePaster0.paste(linkedList0, list0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      // Undeclared exception!
      try { 
        linePaster0.paste((Collection<OriLine>) null, (Collection<OriLine>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.tool.RectangleDomain", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(3199.9637854, 3199.9637854, 3199.9637854, 2.0, 1167533019);
      OriLine oriLine1 = new OriLine(oriLine0);
      linkedList0.add(oriLine1);
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine2 = new OriLine();
      oriLine2.p0 = oriLine1.p1;
      linkedList1.add(oriLine2);
      linePaster0.paste(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, (-154.4), 1367, 0.0, 846);
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine();
      linkedList1.add(oriLine1);
      linePaster0.paste(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, 0.0, (-1), 0.0, (-1));
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine((-1), (-1), (-1), (-1), (-1));
      linkedList1.add(oriLine1);
      linePaster0.paste(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertEquals(1, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, (-154.4), 1367, 0.0, 846);
      linkedList0.add(oriLine0);
      OriLine oriLine1 = new OriLine();
      OriLine oriLine2 = new OriLine((-1), (-1), 1367, (-1), (-1));
      linkedList1.add(oriLine2);
      linePaster0.paste(linkedList0, linkedList1);
      LinkedList<OriLine> linkedList2 = new LinkedList<OriLine>();
      linkedList2.add(oriLine1);
      linePaster0.paste(linkedList2, linkedList1);
      assertTrue(linkedList2.contains(oriLine1));
      assertEquals(5, linkedList1.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinePaster linePaster0 = new LinePaster();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      OriLine oriLine0 = new OriLine(0.0, (-154.4), 1367, 0.0, 846);
      linkedList0.add(oriLine0);
      LinkedList<OriLine> linkedList1 = new LinkedList<OriLine>();
      linePaster0.paste(linkedList1, linkedList0);
      assertTrue(linkedList0.contains(oriLine0));
  }
}
