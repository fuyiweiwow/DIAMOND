/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:17:19 GMT 2018
 */

package diamond.paint.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.paint.core.PaintConfig;
import diamond.paint.util.ElementSelector;
import diamond.value.OriLine;
import diamond.value.OriPoint;
import java.awt.BasicStroke;
import java.awt.Color;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ElementSelector_ESTest extends ElementSelector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      OriPoint oriPoint0 = new OriPoint((-711.47653), (-711.47653));
      OriLine oriLine0 = new OriLine(oriPoint0, oriPoint0, (-3290));
      Color color0 = elementSelector0.selectLineColor(oriLine0);
      assertEquals(0, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      PaintConfig.inputLineType = 0;
      Color color0 = elementSelector0.selectColorByPickupOrder(4, 0);
      assertEquals(192, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      // Undeclared exception!
      try { 
        elementSelector0.selectLineColor((OriLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.util.ElementSelector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByLineType(1);
      assertEquals(0, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByLineType(0);
      assertEquals(192, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      BasicStroke basicStroke0 = elementSelector0.selectStroke(861);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      BasicStroke basicStroke0 = elementSelector0.selectStroke(3);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      BasicStroke basicStroke0 = elementSelector0.selectStroke(2);
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      BasicStroke basicStroke0 = elementSelector0.selectStroke(1);
      assertEquals(0, basicStroke0.getEndCap());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      BasicStroke basicStroke0 = elementSelector0.selectStroke(0);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      OriLine oriLine0 = new OriLine();
      oriLine0.selected = true;
      Color color0 = elementSelector0.selectLineColor(oriLine0);
      assertEquals((-16711936), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByPickupOrder(0, 1);
      assertEquals((-16711936), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByLineType(3);
      assertEquals(255, color0.getBlue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByLineType(2);
      assertEquals((-65536), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      PaintConfig.inputLineType = 41;
      PaintConfig.inputLineType = 1;
      Color color0 = elementSelector0.selectColorByPickupOrder(0, 3);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      Color color0 = elementSelector0.selectColorByLineType(41);
      assertEquals((-16777216), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ElementSelector elementSelector0 = new ElementSelector();
      OriLine oriLine0 = new OriLine();
      Color color0 = elementSelector0.selectLineColor(oriLine0);
      assertEquals(192, color0.getRed());
  }
}
