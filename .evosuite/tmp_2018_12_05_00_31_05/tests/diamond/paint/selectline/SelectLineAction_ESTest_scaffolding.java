/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Tue Dec 04 17:15:27 GMT 2018
 */

package diamond.paint.selectline;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SelectLineAction_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "diamond.paint.selectline.SelectLineAction"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "MS932"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\long_\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "JP"); 
    java.lang.System.setProperty("user.dir", "C:\\Users\\long_\\git\\DIAMOND"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\long_"); 
    java.lang.System.setProperty("user.language", "ja"); 
    java.lang.System.setProperty("user.name", "long_"); 
    java.lang.System.setProperty("user.timezone", ""); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SelectLineAction_ESTest_scaffolding.class.getClassLoader() ,
      "diamond.paint.segment.SelectingSecondVertexForSegment",
      "diamond.resource.Constants$EditMode",
      "diamond.doc.Doc",
      "diamond.paint.creasepattern.VerticesManager$AreaPosition",
      "diamond.paint.segment.TwoPointSegmentAction",
      "diamond.paint.segment.SelectingFirstVertexForSegment",
      "diamond.paint.creasepattern.VerticesManager",
      "diamond.fold.FoldedModelInfo",
      "diamond.paint.core.PaintConfig",
      "diamond.doc.DocHolder",
      "diamond.paint.core.PickingLine",
      "diamond.viewsetting.ViewSettingDataBase",
      "diamond.paint.geometry.NearestVertexFinder",
      "diamond.doc.UndoInfo",
      "diamond.resource.Constants",
      "diamond.resource.Constants$LineInputMode",
      "diamond.paint.geometry.GeometricOperation",
      "diamond.geom.Line",
      "diamond.paint.core.GraphicMouseAction",
      "diamond.value.OriLine",
      "diamond.paint.creasepattern.LineManager",
      "diamond.geom.Ray",
      "diamond.doc.UndoManager",
      "diamond.fold.OriFace",
      "diamond.geom.GeomUtil",
      "diamond.paint.core.ActionState",
      "diamond.paint.core.AbstractActionState",
      "diamond.value.OriPoint",
      "diamond.paint.ScreenUpdaterInterface",
      "diamond.paint.core.PickingVertex",
      "diamond.geom.Segment",
      "diamond.paint.creasepattern.CreasePattern",
      "diamond.fold.OriHalfedge",
      "diamond.paint.core.LineSetting",
      "diamond.viewsetting.ViewScreenUpdater",
      "diamond.fold.OrigamiModel",
      "diamond.paint.creasepattern.CreasePattern$CreasePatternIterator",
      "diamond.value.OriLine$Type",
      "diamond.viewsetting.main.ScreenUpdater",
      "diamond.paint.GraphicMouseActionInterface",
      "diamond.paint.EditMode",
      "diamond.paint.selectline.SelectingLine",
      "diamond.fold.BoundBox",
      "diamond.paint.util.ElementSelector",
      "diamond.resource.Constants$ModelDispMode",
      "diamond.paint.core.RectangularSelectableAction",
      "diamond.paint.core.PaintContext",
      "diamond.paint.selectline.SelectLineAction",
      "diamond.paint.geometry.NearestPoint"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("diamond.doc.Doc", false, SelectLineAction_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("java.awt.Graphics2D", false, SelectLineAction_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SelectLineAction_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "diamond.paint.core.GraphicMouseAction",
      "diamond.paint.core.RectangularSelectableAction",
      "diamond.paint.selectline.SelectLineAction",
      "diamond.paint.EditMode",
      "diamond.doc.Doc",
      "diamond.doc.UndoManager",
      "diamond.paint.creasepattern.CreasePattern",
      "diamond.paint.creasepattern.LineManager",
      "diamond.paint.creasepattern.VerticesManager",
      "diamond.value.OriLine",
      "diamond.value.OriLine$Type",
      "diamond.value.OriPoint",
      "diamond.paint.creasepattern.VerticesManager$AreaPosition",
      "diamond.fold.OrigamiModel",
      "diamond.fold.FoldedModelInfo",
      "diamond.fold.BoundBox",
      "diamond.doc.DocHolder",
      "diamond.resource.Constants$ModelDispMode",
      "diamond.paint.segment.TwoPointSegmentAction",
      "diamond.paint.core.AbstractActionState",
      "diamond.paint.core.PickingVertex",
      "diamond.paint.segment.SelectingFirstVertexForSegment",
      "diamond.paint.core.PaintConfig",
      "diamond.paint.core.PaintContext",
      "diamond.paint.core.PickingLine",
      "diamond.paint.selectline.SelectingLine",
      "diamond.paint.creasepattern.CreasePattern$CreasePatternIterator",
      "diamond.paint.util.ElementSelector",
      "diamond.paint.geometry.GeometricOperation",
      "diamond.paint.geometry.NearestVertexFinder",
      "diamond.paint.geometry.NearestPoint",
      "diamond.paint.core.LineSetting",
      "diamond.doc.UndoInfo",
      "diamond.geom.GeomUtil",
      "diamond.viewsetting.ViewSettingDataBase",
      "diamond.viewsetting.main.ScreenUpdater",
      "diamond.geom.Segment",
      "diamond.geom.Line"
    );
  }
}
