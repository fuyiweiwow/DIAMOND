/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:15:27 GMT 2018
 */

package diamond.paint.selectline;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.doc.Doc;
import diamond.doc.DocHolder;
import diamond.paint.core.PaintConfig;
import diamond.paint.core.PaintContext;
import diamond.paint.creasepattern.CreasePattern;
import diamond.paint.selectline.SelectLineAction;
import diamond.value.OriLine;
import java.awt.Graphics2D;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SelectLineAction_ESTest extends SelectLineAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      oriLine0.typeVal = (-3);
      linkedList0.add(oriLine0);
      PaintConfig.dispAuxLines = false;
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      oriLine0.typeVal = 3260;
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(oriLine0);
      PaintConfig.dispMVLines = false;
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      selectLineAction0.undo(paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      // Undeclared exception!
      try { 
        selectLineAction0.recover((PaintContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.selectline.SelectLineAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      paintContext0.pushLine((OriLine) null);
      // Undeclared exception!
      try { 
        selectLineAction0.onDraw(graphics2D0, paintContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.core.GraphicMouseAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SelectLineAction selectLineAction0 = null;
      try {
        selectLineAction0 = new SelectLineAction((PaintContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.selectline.SelectLineAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      Doc doc0 = mock(Doc.class, new ViolatedAssumptionAnswer());
      doReturn((CreasePattern) null).when(doc0).getCreasePattern();
      DocHolder.setDoc(doc0);
      selectLineAction0.recover(paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      selectLineAction0.recover(paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      // Undeclared exception!
      try { 
        selectLineAction0.undo((PaintContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.selectline.SelectLineAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      OriLine.Type oriLine_Type0 = OriLine.Type.VALLEY;
      oriLine0.setType(oriLine_Type0);
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(oriLine0);
      PaintConfig.dispAuxLines = false;
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      oriLine0.setTypeValue(3);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(oriLine0);
      PaintConfig.dispMVLines = false;
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      PaintConfig.dispMVLines = false;
      OriLine oriLine0 = new OriLine(0.0, 0.0, 0.0, 2, 2);
      linkedList0.add(oriLine0);
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(oriLine0);
      PaintConfig.dispMVLines = false;
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine.Type oriLine_Type0 = OriLine.Type.CUT;
      paintContext0.pickCandidateL.setType(oriLine_Type0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(paintContext0.pickCandidateL);
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      OriLine oriLine0 = paintContext0.pickCandidateL;
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(oriLine0);
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      linkedList0.add(paintContext0.pickCandidateL);
      // Undeclared exception!
      try { 
        selectLineAction0.afterRectangularSelection(linkedList0, paintContext0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.selectline.SelectLineAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PaintContext paintContext0 = PaintContext.getInstance();
      SelectLineAction selectLineAction0 = new SelectLineAction(paintContext0);
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      selectLineAction0.onDraw(graphics2D0, paintContext0);
      assertTrue(selectLineAction0.needSelect());
  }
}
