/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:13:33 GMT 2018
 */

package diamond.paint.creasepattern.tool;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.paint.creasepattern.tool.LineTypeChanger;
import diamond.paint.creasepattern.tool.TypeForChange;
import diamond.value.OriLine;
import java.util.Collection;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LineTypeChanger_ESTest extends LineTypeChanger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      oriLine0.typeVal = 4;
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.FLIP;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange0);
      assertEquals(4, oriLine0.typeVal);
      assertEquals(4, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine(1350.620803, 1350.620803, 436.64478, 436.64478, 5312);
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.VALLEY;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange0);
      assertEquals(5312, oriLine0.typeVal);
      assertEquals(5312, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine(2755.25, 2755.25, 2755.25, 2755.25, 2);
      TypeForChange typeForChange0 = TypeForChange.FLIP;
      lineTypeChanger0.alterLineType(oriLine0, (Collection<OriLine>) null, typeForChange0, typeForChange0);
      TypeForChange typeForChange1 = TypeForChange.RIDGE;
      lineTypeChanger0.alterLineType(oriLine0, (Collection<OriLine>) null, typeForChange1, typeForChange1);
      assertEquals(3, oriLine0.typeVal);
      assertEquals(3, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.FLIP;
      // Undeclared exception!
      try { 
        lineTypeChanger0.alterLineType((OriLine) null, linkedList0, typeForChange0, typeForChange0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.tool.LineTypeChanger", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.AUX;
      TypeForChange typeForChange1 = TypeForChange.RIDGE;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange1);
      TypeForChange typeForChange2 = TypeForChange.FLIP;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange2, typeForChange2);
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange2, typeForChange2);
      assertEquals(2, oriLine0.typeVal);
      assertEquals(2, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.FLIP;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange0);
      assertEquals(0, oriLine0.typeVal);
      assertEquals(0, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.DELETE;
      TypeForChange typeForChange1 = TypeForChange.CUT;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange1);
      assertEquals(1, oriLine0.typeVal);
      assertEquals(1, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.DELETE;
      TypeForChange typeForChange1 = TypeForChange.VALLEY;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange1);
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange1, typeForChange0);
      assertEquals(3, oriLine0.typeVal);
      assertEquals(3, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.DELETE;
      TypeForChange typeForChange1 = TypeForChange.VALLEY;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange1, typeForChange0);
      assertFalse(oriLine0.selected);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.AUX;
      TypeForChange typeForChange1 = TypeForChange.RIDGE;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange0, typeForChange1);
      assertEquals(2, oriLine0.typeVal);
      
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange1, typeForChange0);
      assertEquals(0, oriLine0.getTypeValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      OriLine oriLine0 = new OriLine();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.AUX;
      TypeForChange typeForChange1 = TypeForChange.RIDGE;
      lineTypeChanger0.alterLineType(oriLine0, linkedList0, typeForChange1, typeForChange0);
      assertFalse(linkedList0.contains(oriLine0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LineTypeChanger lineTypeChanger0 = new LineTypeChanger();
      LinkedList<OriLine> linkedList0 = new LinkedList<OriLine>();
      TypeForChange typeForChange0 = TypeForChange.EMPTY;
      lineTypeChanger0.alterLineType((OriLine) null, linkedList0, typeForChange0, typeForChange0);
      assertEquals(0, linkedList0.size());
  }
}
