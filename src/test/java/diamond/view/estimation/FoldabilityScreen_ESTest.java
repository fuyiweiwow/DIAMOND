/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 16:59:58 GMT 2018
 */

package diamond.view.estimation;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.fold.OriFace;
import diamond.fold.OrigamiModel;
import diamond.value.OriLine;
import diamond.view.estimation.FoldabilityScreen;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.FocusEvent;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.ArrayDeque;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.java2d.SunGraphics2D;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FoldabilityScreen_ESTest extends FoldabilityScreen_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double((-6186.638), 0, 16.0, 280.449317796956);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      rectangle0.setRect((-2149.4859485), 0.0, 16.0, 0.0);
      foldabilityScreen0.setBounds(rectangle0);
      foldabilityScreen0.componentResized(focusEvent0);
      assertFalse(foldabilityScreen0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 0);
      foldabilityScreen0.setSize((-26), (-2373));
      foldabilityScreen0.componentResized(focusEvent0);
      assertFalse(foldabilityScreen0.isFocusTraversalPolicySet());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      OrigamiModel origamiModel0 = new OrigamiModel(1940);
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      ArrayDeque<OriLine> arrayDeque0 = new ArrayDeque<OriLine>();
      foldabilityScreen0.showModel(origamiModel0, arrayDeque0);
      BufferedImage bufferedImage0 = new BufferedImage(1940, 473, 4);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      foldabilityScreen0.drawModel(sunGraphics2D0);
      assertEquals(255, sunGraphics2D0.pixel);
      assertEquals((-65536), sunGraphics2D0.eargb);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      foldabilityScreen0.resetPickElements();
      assertFalse(foldabilityScreen0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      BufferedImage bufferedImage0 = new BufferedImage(1940, 1940, 6);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        foldabilityScreen0.paintComponent(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.estimation.FoldabilityScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      OrigamiModel origamiModel0 = new OrigamiModel(1953);
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      linkedList0.add(oriFace0);
      origamiModel0.setFaces(linkedList0);
      ArrayDeque<OriLine> arrayDeque0 = new ArrayDeque<OriLine>();
      foldabilityScreen0.showModel(origamiModel0, arrayDeque0);
      // Undeclared exception!
      try { 
        foldabilityScreen0.drawModel((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.estimation.FoldabilityScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      BufferedImage bufferedImage0 = new BufferedImage(13, 13, 13);
      SunGraphics2D sunGraphics2D0 = (SunGraphics2D)bufferedImage0.createGraphics();
      foldabilityScreen0.drawModel(sunGraphics2D0);
      assertEquals(0, sunGraphics2D0.clipState);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, (-41));
      foldabilityScreen0.setSize(17, (-41));
      foldabilityScreen0.componentResized(focusEvent0);
      assertFalse(focusEvent0.isTemporary());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 16);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(16, 16, 16, 16);
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      foldabilityScreen0.setBounds(rectangle0);
      // Undeclared exception!
      try { 
        foldabilityScreen0.componentResized(focusEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.view.estimation.FoldabilityScreen", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 16);
      foldabilityScreen0.componentResized(focusEvent0);
      assertTrue(foldabilityScreen0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      foldabilityScreen0.modeChanged();
      assertFalse(foldabilityScreen0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 16);
      foldabilityScreen0.componentHidden(focusEvent0);
      assertFalse(foldabilityScreen0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 16);
      foldabilityScreen0.componentMoved(focusEvent0);
      assertFalse(foldabilityScreen0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      FocusEvent focusEvent0 = new FocusEvent(foldabilityScreen0, 16);
      foldabilityScreen0.componentShown(focusEvent0);
      assertEquals(16, focusEvent0.getID());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FoldabilityScreen foldabilityScreen0 = new FoldabilityScreen();
      foldabilityScreen0.setDispGrid(true);
      assertFalse(foldabilityScreen0.isFocusTraversalPolicyProvider());
  }
}
