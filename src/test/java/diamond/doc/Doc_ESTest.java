/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 04 17:11:42 GMT 2018
 */

package diamond.doc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import diamond.doc.Doc;
import diamond.doc.DocHolder;
import diamond.doc.UndoInfo;
import diamond.fold.FoldedModelInfo;
import diamond.fold.OriFace;
import diamond.fold.OrigamiModel;
import diamond.paint.creasepattern.CreasePattern;
import diamond.value.OriLine;
import java.util.ArrayList;
import java.util.LinkedList;
import javax.vecmath.Vector2d;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Doc_ESTest extends Doc_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Doc doc0 = new Doc((-1611.1));
      doc0.getVerticesArea(740.6427863761, (-1611.1), (-1369.22));
      assertEquals((-1611.1), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Doc doc0 = new Doc((-1.7976931348623157E308));
      doc0.pushUndoInfo();
      doc0.isChanged();
      assertEquals((-1.7976931348623157E308), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Doc doc0 = new Doc((-1.7976931348623157E308));
      doc0.setTitle("DefaultFileName");
      String string0 = doc0.getTitle();
      assertNotNull(string0);
      assertEquals((-1.7976931348623157E308), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Doc doc0 = new Doc(2835.222531790726);
      doc0.setTitle("");
      doc0.getTitle();
      assertEquals(2835.222531790726, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Doc doc0 = new Doc((-1.7976931348623157E308));
      doc0.setReference("xTFCe;");
      doc0.getReference();
      assertEquals((-1.7976931348623157E308), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Doc doc0 = new Doc((-914.60496020253));
      doc0.setReference("");
      String string0 = doc0.getReference();
      assertNotNull(string0);
      assertEquals((-914.60496020253), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Doc doc0 = new Doc(0.0);
      double double0 = doc0.getPaperSize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Doc doc0 = new Doc();
      double double0 = doc0.getPaperSize();
      assertEquals(400.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setOriginalAuthorName("!HIG?ss2EE0<v}U>P");
      String string0 = doc0.getOriginalAuthorName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setOriginalAuthorName("");
      String string0 = doc0.getOriginalAuthorName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Doc doc0 = new Doc(2906.517655626214);
      doc0.setOrigamiModel((OrigamiModel) null);
      doc0.getOrigamiModel();
      assertEquals(2906.517655626214, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Doc doc0 = new Doc(0.75);
      OrigamiModel origamiModel0 = new OrigamiModel(0);
      origamiModel0.setProbablyFoldable(true);
      doc0.setOrigamiModel(origamiModel0);
      OrigamiModel origamiModel1 = doc0.getOrigamiModel();
      assertFalse(origamiModel1.isFolded());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Doc doc0 = new Doc();
      OrigamiModel origamiModel0 = doc0.getOrigamiModel();
      origamiModel0.setFolded(true);
      doc0.getOrigamiModel();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Doc doc0 = new Doc((-811.233908048943));
      OrigamiModel origamiModel0 = doc0.getOrigamiModel();
      origamiModel0.setHasModel(true);
      OrigamiModel origamiModel1 = doc0.getOrigamiModel();
      assertEquals((-811.233908048943), origamiModel1.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setMemo("nDR~");
      doc0.getMemo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Doc doc0 = new Doc((-1.7976931348623157E308));
      doc0.setMemo("");
      String string0 = doc0.getMemo();
      assertEquals((-1.7976931348623157E308), doc0.getPaperSize(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Doc doc0 = new Doc(4672.252738441);
      doc0.setFoldedModelInfo((FoldedModelInfo) null);
      doc0.getFoldedModelInfo();
      assertEquals(4672.252738441, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Doc doc0 = new Doc();
      FoldedModelInfo foldedModelInfo0 = doc0.getFoldedModelInfo();
      LinkedList<int[][]> linkedList0 = new LinkedList<int[][]>();
      int[][] intArray0 = new int[4][1];
      linkedList0.add(intArray0);
      foldedModelInfo0.setFoldableOverlapRelations(linkedList0);
      doc0.getFoldedModelInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Doc doc0 = new Doc();
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      foldedModelInfo0.setCurrentORmatIndex(30);
      doc0.setFoldedModelInfo(foldedModelInfo0);
      doc0.getFoldedModelInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Doc doc0 = new Doc();
      FoldedModelInfo foldedModelInfo0 = new FoldedModelInfo();
      foldedModelInfo0.setCurrentORmatIndex((-483));
      doc0.setFoldedModelInfo(foldedModelInfo0);
      doc0.getFoldedModelInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Doc doc0 = new Doc(4672.252738441);
      doc0.setEditorName("uTW3|~3/ivr!^i/R79");
      String string0 = doc0.getEditorName();
      assertEquals(4672.252738441, doc0.getPaperSize(), 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setEditorName("");
      String string0 = doc0.getEditorName();
      assertNotNull(string0);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Doc doc0 = new Doc(0.7);
      doc0.setDataFilePath((String) null);
      doc0.getDataFilePath();
      assertEquals(0.7, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setDataFilePath("UI_ChangeLineTypeTo");
      doc0.getDataFilePath();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setDataFilePath("diamond.doc.Doc");
      DocHolder.setDoc(doc0);
      String string0 = doc0.getDataFileName();
      assertNotNull(string0);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setCrossLines((ArrayList<OriLine>) null);
      doc0.getCrossLines();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Doc doc0 = new Doc(0.0);
      ArrayList<OriLine> arrayList0 = doc0.getCrossLines();
      OriLine oriLine0 = new OriLine();
      arrayList0.add(oriLine0);
      doc0.getCrossLines();
      assertEquals(0.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Doc doc0 = new Doc(0.0);
      ArrayList<OriLine> arrayList0 = doc0.getCrossLines();
      UndoInfo undoInfo0 = new UndoInfo(arrayList0);
      doc0.pushUndoInfo(undoInfo0);
      doc0.loadUndoInfo();
      CreasePattern creasePattern0 = doc0.getCreasePattern();
      assertEquals(0.0, creasePattern0.getPaperSize(), 0.01);
      assertEquals(0, creasePattern0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Doc doc0 = new Doc(0.0);
      CreasePattern creasePattern0 = doc0.getCreasePattern();
      assertEquals(0.0, doc0.getPaperSize(), 0.01);
      assertEquals(0.0, creasePattern0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Doc doc0 = new Doc((-355.75279));
      doc0.getCreasePattern();
      assertEquals((-355.75279), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.pushUndoInfo();
      boolean boolean0 = doc0.canUndo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setOrigamiModel((OrigamiModel) null);
      // Undeclared exception!
      try { 
        doc0.setPaperSize((-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.doc.Doc", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setOrigamiModel((OrigamiModel) null);
      OriLine oriLine0 = new OriLine(1, 0, 9, 217.1464275477, 9);
      // Undeclared exception!
      try { 
        doc0.setCrossLine(oriLine0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.doc.Doc", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Doc doc0 = new Doc();
      // Undeclared exception!
      try { 
        doc0.getVerticesAround((Vector2d) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.paint.creasepattern.VerticesManager$AreaPosition", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Doc doc0 = new Doc();
      DocHolder.setDoc((Doc) null);
      // Undeclared exception!
      try { 
        doc0.getDataFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.doc.Doc", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Doc doc0 = new Doc();
      // Undeclared exception!
      try { 
        doc0.addLine((OriLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("diamond.geom.GeomUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Doc doc0 = new Doc(0.75);
      doc0.getDataFilePath();
      assertEquals(0.75, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.createUndoInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.loadUndoInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.setDataFilePath("P");
      String string0 = doc0.buildFileName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Doc doc0 = new Doc();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
      
      doc0.setPaperSize((-1.0));
      assertEquals((-1.0), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.getMemo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Doc doc0 = new Doc((-3168.900461047891));
      doc0.clearChanged();
      assertEquals((-3168.900461047891), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.pushCachedUndoInfo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Doc doc0 = new Doc();
      OrigamiModel origamiModel0 = doc0.getOrigamiModel();
      LinkedList<OriFace> linkedList0 = new LinkedList<OriFace>();
      OriFace oriFace0 = new OriFace();
      linkedList0.add(oriFace0);
      origamiModel0.setSortedFaces(linkedList0);
      OriLine oriLine0 = new OriLine();
      doc0.setCrossLine(oriLine0);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.isChanged();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.buildFileName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.canUndo();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.getReference();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Doc doc0 = new Doc();
      Vector2d vector2d0 = new Vector2d(0.0, 1763.0);
      OriLine oriLine0 = new OriLine(vector2d0, vector2d0, 2828);
      doc0.addLine(oriLine0);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Doc doc0 = new Doc();
      CreasePattern creasePattern0 = doc0.getCreasePattern();
      UndoInfo undoInfo0 = new UndoInfo(creasePattern0);
      doc0.pushUndoInfo(undoInfo0);
      assertEquals(400.0, creasePattern0.getPaperSize(), 0.01);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Doc doc0 = new Doc();
      double[] doubleArray0 = new double[4];
      Vector2d vector2d0 = new Vector2d(doubleArray0);
      doc0.getVerticesAround(vector2d0);
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.getDataFileName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.getTitle();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Doc doc0 = new Doc((-355.75279));
      doc0.cacheUndoInfo();
      assertEquals((-355.75279), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Doc doc0 = new Doc();
      doc0.getEditorName();
      assertEquals(400.0, doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Doc doc0 = new Doc((-3168.900461047891));
      doc0.getOriginalAuthorName();
      assertEquals((-3168.900461047891), doc0.getPaperSize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Doc doc0 = new Doc((-355.75279));
      doc0.setDataFilePath((String) null);
      // Undeclared exception!
      try { 
        doc0.buildFileName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Doc doc0 = new Doc((-3168.900461047891));
      double double0 = doc0.getPaperSize();
      assertEquals((-3168.900461047891), double0, 0.01);
  }
}
